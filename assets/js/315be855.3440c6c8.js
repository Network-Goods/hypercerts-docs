"use strict";(self.webpackChunkhypercerts_docs=self.webpackChunkhypercerts_docs||[]).push([[246],{3905:(t,e,a)=>{a.d(e,{Zo:()=>u,kt:()=>s});var n=a(7294);function l(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){l(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function p(t,e){if(null==t)return{};var a,n,l=function(t,e){if(null==t)return{};var a,n,l={},r=Object.keys(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||(l[a]=t[a]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(l[a]=t[a])}return l}var d=n.createContext({}),o=function(t){var e=n.useContext(d),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},u=function(t){var e=o(t.components);return n.createElement(d.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},k=n.forwardRef((function(t,e){var a=t.components,l=t.mdxType,r=t.originalType,d=t.parentName,u=p(t,["components","mdxType","originalType","parentName"]),k=o(a),s=l,N=k["".concat(d,".").concat(s)]||k[s]||m[s]||r;return a?n.createElement(N,i(i({ref:e},u),{},{components:a})):n.createElement(N,i({ref:e},u))}));function s(t,e){var a=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=a.length,i=new Array(r);i[0]=k;var p={};for(var d in e)hasOwnProperty.call(e,d)&&(p[d]=e[d]);p.originalType=t,p.mdxType="string"==typeof t?t:l,i[1]=p;for(var o=2;o<r;o++)i[o]=a[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},834:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>o});var n=a(7462),l=(a(7294),a(3905));const r={},i="Solidity API",p={unversionedId:"contracts/index",id:"contracts/index",title:"Solidity API",description:"ERC3525Upgradeable",source:"@site/docs/contracts/index.md",sourceDirName:"contracts",slug:"/contracts/",permalink:"/hypercerts-docs/contracts/",draft:!1,editUrl:"https://github.com/protocol/hypercerts-docs/docs/contracts/index.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Minting",permalink:"/hypercerts-docs/refinement/mint"}},d={},o=[{value:"ERC3525Upgradeable",id:"erc3525upgradeable",level:2},{value:"ApproveData",id:"approvedata",level:3},{value:"_values",id:"_values",level:3},{value:"_approvedValues",id:"_approvedvalues",level:3},{value:"_slots",id:"_slots",level:3},{value:"_name",id:"_name",level:3},{value:"_symbol",id:"_symbol",level:3},{value:"_decimals",id:"_decimals",level:3},{value:"initialize",id:"initialize",level:3},{value:"supportsInterface",id:"supportsinterface",level:3},{value:"valueDecimals",id:"valuedecimals",level:3},{value:"balanceOf",id:"balanceof",level:3},{value:"slotOf",id:"slotof",level:3},{value:"contractURI",id:"contracturi",level:3},{value:"slotURI",id:"sloturi",level:3},{value:"approve",id:"approve",level:3},{value:"allowance",id:"allowance",level:3},{value:"tokenURI",id:"tokenuri",level:3},{value:"transferFrom",id:"transferfrom",level:3},{value:"transferFrom",id:"transferfrom-1",level:3},{value:"_mint",id:"_mint",level:3},{value:"_mintValue",id:"_mintvalue",level:3},{value:"_burn",id:"_burn",level:3},{value:"_transfer",id:"_transfer",level:3},{value:"_spendAllowance",id:"_spendallowance",level:3},{value:"_approveValue",id:"_approvevalue",level:3},{value:"_getNewTokenId",id:"_getnewtokenid",level:3},{value:"_beforeTokenTransfer",id:"_beforetokentransfer",level:3},{value:"_afterTokenTransfer",id:"_aftertokentransfer",level:3},{value:"_checkOnERC3525Received",id:"_checkonerc3525received",level:3},{value:"_beforeValueTransfer",id:"_beforevaluetransfer",level:3},{value:"_afterValueTransfer",id:"_aftervaluetransfer",level:3},{value:"IERC3525MetadataUpgradeable",id:"ierc3525metadataupgradeable",level:2},{value:"contractURI",id:"contracturi-1",level:3},{value:"slotURI",id:"sloturi-1",level:3},{value:"IERC3525Receiver",id:"ierc3525receiver",level:2},{value:"onERC3525Received",id:"onerc3525received",level:3},{value:"IERC3525Upgradeable",id:"ierc3525upgradeable",level:2},{value:"TransferValue",id:"transfervalue",level:3},{value:"ApprovalValue",id:"approvalvalue",level:3},{value:"SlotChanged",id:"slotchanged",level:3},{value:"valueDecimals",id:"valuedecimals-1",level:3},{value:"balanceOf",id:"balanceof-1",level:3},{value:"slotOf",id:"slotof-1",level:3},{value:"approve",id:"approve-1",level:3},{value:"allowance",id:"allowance-1",level:3},{value:"transferFrom",id:"transferfrom-2",level:3},{value:"transferFrom",id:"transferfrom-3",level:3},{value:"ERC3525Upgradeable",id:"erc3525upgradeable-1",level:2},{value:"ApproveData",id:"approvedata-1",level:3},{value:"_values",id:"_values-1",level:3},{value:"_approvedValues",id:"_approvedvalues-1",level:3},{value:"_slots",id:"_slots-1",level:3},{value:"_name",id:"_name-1",level:3},{value:"_symbol",id:"_symbol-1",level:3},{value:"_decimals",id:"_decimals-1",level:3},{value:"initialize",id:"initialize-1",level:3},{value:"supportsInterface",id:"supportsinterface-1",level:3},{value:"valueDecimals",id:"valuedecimals-2",level:3},{value:"balanceOf",id:"balanceof-2",level:3},{value:"slotOf",id:"slotof-2",level:3},{value:"contractURI",id:"contracturi-2",level:3},{value:"slotURI",id:"sloturi-2",level:3},{value:"approve",id:"approve-2",level:3},{value:"allowance",id:"allowance-2",level:3},{value:"tokenURI",id:"tokenuri-1",level:3},{value:"transferFrom",id:"transferfrom-4",level:3},{value:"transferFrom",id:"transferfrom-5",level:3},{value:"_mint",id:"_mint-1",level:3},{value:"_mintValue",id:"_mintvalue-1",level:3},{value:"_burn",id:"_burn-1",level:3},{value:"_transfer",id:"_transfer-1",level:3},{value:"_spendAllowance",id:"_spendallowance-1",level:3},{value:"_approveValue",id:"_approvevalue-1",level:3},{value:"_getNewTokenId",id:"_getnewtokenid-1",level:3},{value:"_beforeTokenTransfer",id:"_beforetokentransfer-1",level:3},{value:"_afterTokenTransfer",id:"_aftertokentransfer-1",level:3},{value:"_checkOnERC3525Received",id:"_checkonerc3525received-1",level:3},{value:"_beforeValueTransfer",id:"_beforevaluetransfer-1",level:3},{value:"_afterValueTransfer",id:"_aftervaluetransfer-1",level:3},{value:"HypercertMinterV0",id:"hypercertminterv0",level:2},{value:"NAME",id:"name",level:3},{value:"UPGRADER_ROLE",id:"upgrader_role",level:3},{value:"DEFAULT_UNITS",id:"default_units",level:3},{value:"_version",id:"_version",level:3},{value:"_counter",id:"_counter",level:3},{value:"workScopes",id:"workscopes",level:3},{value:"impactScopes",id:"impactscopes",level:3},{value:"rights",id:"rights",level:3},{value:"_contributorImpacts",id:"_contributorimpacts",level:3},{value:"_impactCerts",id:"_impactcerts",level:3},{value:"Claim",id:"claim",level:3},{value:"ImpactClaimed",id:"impactclaimed",level:3},{value:"ImpactScopeAdded",id:"impactscopeadded",level:3},{value:"RightAdded",id:"rightadded",level:3},{value:"WorkScopeAdded",id:"workscopeadded",level:3},{value:"constructor",id:"constructor",level:3},{value:"initialize",id:"initialize-2",level:3},{value:"addImpactScope",id:"addimpactscope",level:3},{value:"addRight",id:"addright",level:3},{value:"addWorkScope",id:"addworkscope",level:3},{value:"mint",id:"mint",level:3},{value:"getImpactCert",id:"getimpactcert",level:3},{value:"version",id:"version",level:3},{value:"updateVersion",id:"updateversion",level:3},{value:"supportsInterface",id:"supportsinterface-2",level:3},{value:"_authorizeUpgrade",id:"_authorizeupgrade",level:3},{value:"_authorizeAdd",id:"_authorizeadd",level:3},{value:"_authorizeMint",id:"_authorizemint",level:3},{value:"_parseData",id:"_parsedata",level:3},{value:"_storeContributorsClaims",id:"_storecontributorsclaims",level:3},{value:"_hash",id:"_hash",level:3},{value:"_hasKey",id:"_haskey",level:3},{value:"IERC3525MetadataUpgradeable",id:"ierc3525metadataupgradeable-1",level:2},{value:"contractURI",id:"contracturi-3",level:3},{value:"slotURI",id:"sloturi-3",level:3},{value:"IERC3525Receiver",id:"ierc3525receiver-1",level:2},{value:"onERC3525Received",id:"onerc3525received-1",level:3},{value:"IERC3525Upgradeable",id:"ierc3525upgradeable-1",level:2},{value:"TransferValue",id:"transfervalue-1",level:3},{value:"ApprovalValue",id:"approvalvalue-1",level:3},{value:"SlotChanged",id:"slotchanged-1",level:3},{value:"valueDecimals",id:"valuedecimals-3",level:3},{value:"balanceOf",id:"balanceof-3",level:3},{value:"slotOf",id:"slotof-3",level:3},{value:"approve",id:"approve-3",level:3},{value:"allowance",id:"allowance-3",level:3},{value:"transferFrom",id:"transferfrom-6",level:3},{value:"transferFrom",id:"transferfrom-7",level:3},{value:"ERC3525Upgradeable",id:"erc3525upgradeable-2",level:2},{value:"ApproveData",id:"approvedata-2",level:3},{value:"_values",id:"_values-2",level:3},{value:"_approvedValues",id:"_approvedvalues-2",level:3},{value:"_slots",id:"_slots-2",level:3},{value:"_name",id:"_name-2",level:3},{value:"_symbol",id:"_symbol-2",level:3},{value:"_decimals",id:"_decimals-2",level:3},{value:"initialize",id:"initialize-3",level:3},{value:"supportsInterface",id:"supportsinterface-3",level:3},{value:"valueDecimals",id:"valuedecimals-4",level:3},{value:"balanceOf",id:"balanceof-4",level:3},{value:"slotOf",id:"slotof-4",level:3},{value:"contractURI",id:"contracturi-4",level:3},{value:"slotURI",id:"sloturi-4",level:3},{value:"approve",id:"approve-4",level:3},{value:"allowance",id:"allowance-4",level:3},{value:"tokenURI",id:"tokenuri-2",level:3},{value:"transferFrom",id:"transferfrom-8",level:3},{value:"transferFrom",id:"transferfrom-9",level:3},{value:"_mint",id:"_mint-2",level:3},{value:"_mintValue",id:"_mintvalue-2",level:3},{value:"_burn",id:"_burn-2",level:3},{value:"_transfer",id:"_transfer-2",level:3},{value:"_spendAllowance",id:"_spendallowance-2",level:3},{value:"_approveValue",id:"_approvevalue-2",level:3},{value:"_getNewTokenId",id:"_getnewtokenid-2",level:3},{value:"_beforeTokenTransfer",id:"_beforetokentransfer-2",level:3},{value:"_afterTokenTransfer",id:"_aftertokentransfer-2",level:3},{value:"_checkOnERC3525Received",id:"_checkonerc3525received-2",level:3},{value:"_beforeValueTransfer",id:"_beforevaluetransfer-2",level:3},{value:"_afterValueTransfer",id:"_aftervaluetransfer-2",level:3},{value:"HypercertMinterV0",id:"hypercertminterv0-1",level:2},{value:"NAME",id:"name-1",level:3},{value:"UPGRADER_ROLE",id:"upgrader_role-1",level:3},{value:"DEFAULT_UNITS",id:"default_units-1",level:3},{value:"_version",id:"_version-1",level:3},{value:"_counter",id:"_counter-1",level:3},{value:"workScopes",id:"workscopes-1",level:3},{value:"impactScopes",id:"impactscopes-1",level:3},{value:"rights",id:"rights-1",level:3},{value:"_contributorImpacts",id:"_contributorimpacts-1",level:3},{value:"_impactCerts",id:"_impactcerts-1",level:3},{value:"Claim",id:"claim-1",level:3},{value:"ImpactClaimed",id:"impactclaimed-1",level:3},{value:"ImpactScopeAdded",id:"impactscopeadded-1",level:3},{value:"RightAdded",id:"rightadded-1",level:3},{value:"WorkScopeAdded",id:"workscopeadded-1",level:3},{value:"constructor",id:"constructor-1",level:3},{value:"initialize",id:"initialize-4",level:3},{value:"addImpactScope",id:"addimpactscope-1",level:3},{value:"addRight",id:"addright-1",level:3},{value:"addWorkScope",id:"addworkscope-1",level:3},{value:"mint",id:"mint-1",level:3},{value:"getImpactCert",id:"getimpactcert-1",level:3},{value:"version",id:"version-1",level:3},{value:"updateVersion",id:"updateversion-1",level:3},{value:"supportsInterface",id:"supportsinterface-4",level:3},{value:"_authorizeUpgrade",id:"_authorizeupgrade-1",level:3},{value:"_authorizeAdd",id:"_authorizeadd-1",level:3},{value:"_authorizeMint",id:"_authorizemint-1",level:3},{value:"_parseData",id:"_parsedata-1",level:3},{value:"_storeContributorsClaims",id:"_storecontributorsclaims-1",level:3},{value:"_hash",id:"_hash-1",level:3},{value:"_hasKey",id:"_haskey-1",level:3},{value:"IERC3525MetadataUpgradeable",id:"ierc3525metadataupgradeable-2",level:2},{value:"contractURI",id:"contracturi-5",level:3},{value:"slotURI",id:"sloturi-5",level:3},{value:"IERC3525Receiver",id:"ierc3525receiver-2",level:2},{value:"onERC3525Received",id:"onerc3525received-2",level:3},{value:"IERC3525SlotApprovableUpgradeable",id:"ierc3525slotapprovableupgradeable",level:2},{value:"ApprovalForSlot",id:"approvalforslot",level:3},{value:"setApprovalForSlot",id:"setapprovalforslot",level:3},{value:"isApprovedForSlot",id:"isapprovedforslot",level:3},{value:"IERC3525SlotEnumerableUpgradeable",id:"ierc3525slotenumerableupgradeable",level:2},{value:"slotCount",id:"slotcount",level:3},{value:"slotByIndex",id:"slotbyindex",level:3},{value:"tokenSupplyInSlot",id:"tokensupplyinslot",level:3},{value:"tokenInSlotByIndex",id:"tokeninslotbyindex",level:3},{value:"IERC3525Upgradeable",id:"ierc3525upgradeable-2",level:2},{value:"TransferValue",id:"transfervalue-2",level:3},{value:"ApprovalValue",id:"approvalvalue-2",level:3},{value:"SlotChanged",id:"slotchanged-2",level:3},{value:"valueDecimals",id:"valuedecimals-5",level:3},{value:"balanceOf",id:"balanceof-5",level:3},{value:"slotOf",id:"slotof-5",level:3},{value:"approve",id:"approve-5",level:3},{value:"allowance",id:"allowance-5",level:3},{value:"transferFrom",id:"transferfrom-10",level:3},{value:"transferFrom",id:"transferfrom-11",level:3},{value:"HypercertMinterV0",id:"hypercertminterv0-2",level:2},{value:"NAME",id:"name-2",level:3},{value:"UPGRADER_ROLE",id:"upgrader_role-2",level:3},{value:"_version",id:"_version-2",level:3},{value:"_counter",id:"_counter-2",level:3},{value:"workScopes",id:"workscopes-2",level:3},{value:"impactScopes",id:"impactscopes-2",level:3},{value:"rights",id:"rights-2",level:3},{value:"_contributorImpacts",id:"_contributorimpacts-2",level:3},{value:"_impactCerts",id:"_impactcerts-2",level:3},{value:"Claim",id:"claim-2",level:3},{value:"ImpactClaimed",id:"impactclaimed-2",level:3},{value:"ImpactScopeAdded",id:"impactscopeadded-2",level:3},{value:"RightAdded",id:"rightadded-2",level:3},{value:"WorkScopeAdded",id:"workscopeadded-2",level:3},{value:"constructor",id:"constructor-2",level:3},{value:"initialize",id:"initialize-5",level:3},{value:"addImpactScope",id:"addimpactscope-2",level:3},{value:"addRight",id:"addright-2",level:3},{value:"addWorkScope",id:"addworkscope-2",level:3},{value:"mint",id:"mint-2",level:3},{value:"getImpactCert",id:"getimpactcert-2",level:3},{value:"tokenURI",id:"tokenuri-3",level:3},{value:"version",id:"version-2",level:3},{value:"updateVersion",id:"updateversion-2",level:3},{value:"supportsInterface",id:"supportsinterface-5",level:3},{value:"_authorizeUpgrade",id:"_authorizeupgrade-2",level:3},{value:"_authorizeAdd",id:"_authorizeadd-2",level:3},{value:"_authorizeMint",id:"_authorizemint-2",level:3},{value:"_burn",id:"_burn-3",level:3},{value:"_parseData",id:"_parsedata-2",level:3},{value:"_storeContributorsClaims",id:"_storecontributorsclaims-2",level:3},{value:"_hash",id:"_hash-2",level:3},{value:"_hasKey",id:"_haskey-2",level:3},{value:"HypercertMinterV0",id:"hypercertminterv0-3",level:2},{value:"NAME",id:"name-3",level:3},{value:"UPGRADER_ROLE",id:"upgrader_role-3",level:3},{value:"_version",id:"_version-3",level:3},{value:"_counter",id:"_counter-3",level:3},{value:"workScopes",id:"workscopes-3",level:3},{value:"impactScopes",id:"impactscopes-3",level:3},{value:"rights",id:"rights-3",level:3},{value:"_contributorImpacts",id:"_contributorimpacts-3",level:3},{value:"_impactCerts",id:"_impactcerts-3",level:3},{value:"Claim",id:"claim-3",level:3},{value:"ImpactClaimed",id:"impactclaimed-3",level:3},{value:"ImpactScopeAdded",id:"impactscopeadded-3",level:3},{value:"RightAdded",id:"rightadded-3",level:3},{value:"WorkScopeAdded",id:"workscopeadded-3",level:3},{value:"constructor",id:"constructor-3",level:3},{value:"initialize",id:"initialize-6",level:3},{value:"addImpactScope",id:"addimpactscope-3",level:3},{value:"addRight",id:"addright-3",level:3},{value:"addWorkScope",id:"addworkscope-3",level:3},{value:"mint",id:"mint-3",level:3},{value:"getImpactCert",id:"getimpactcert-3",level:3},{value:"tokenURI",id:"tokenuri-4",level:3},{value:"version",id:"version-3",level:3},{value:"updateVersion",id:"updateversion-3",level:3},{value:"supportsInterface",id:"supportsinterface-6",level:3},{value:"_authorizeUpgrade",id:"_authorizeupgrade-3",level:3},{value:"_authorizeAdd",id:"_authorizeadd-3",level:3},{value:"_authorizeMint",id:"_authorizemint-3",level:3},{value:"_burn",id:"_burn-4",level:3},{value:"_parseData",id:"_parsedata-3",level:3},{value:"_storeContributorsClaims",id:"_storecontributorsclaims-3",level:3},{value:"_hash",id:"_hash-3",level:3},{value:"_hasKey",id:"_haskey-3",level:3},{value:"HypercertMinterV0",id:"hypercertminterv0-4",level:2},{value:"NAME",id:"name-4",level:3},{value:"UPGRADER_ROLE",id:"upgrader_role-4",level:3},{value:"_version",id:"_version-4",level:3},{value:"_counter",id:"_counter-4",level:3},{value:"workScopes",id:"workscopes-4",level:3},{value:"impactScopes",id:"impactscopes-4",level:3},{value:"rights",id:"rights-4",level:3},{value:"_contributorImpacts",id:"_contributorimpacts-4",level:3},{value:"_impactCerts",id:"_impactcerts-4",level:3},{value:"Claim",id:"claim-4",level:3},{value:"ImpactClaimed",id:"impactclaimed-4",level:3},{value:"ImpactScopeAdded",id:"impactscopeadded-4",level:3},{value:"RightAdded",id:"rightadded-4",level:3},{value:"WorkScopeAdded",id:"workscopeadded-4",level:3},{value:"constructor",id:"constructor-4",level:3},{value:"initialize",id:"initialize-7",level:3},{value:"addImpactScope",id:"addimpactscope-4",level:3},{value:"addRight",id:"addright-4",level:3},{value:"addWorkScope",id:"addworkscope-4",level:3},{value:"mint",id:"mint-4",level:3},{value:"getImpactCert",id:"getimpactcert-4",level:3},{value:"uri",id:"uri",level:3},{value:"version",id:"version-4",level:3},{value:"updateVersion",id:"updateversion-4",level:3},{value:"supportsInterface",id:"supportsinterface-7",level:3},{value:"_authorizeUpgrade",id:"_authorizeupgrade-4",level:3},{value:"_authorizeAdd",id:"_authorizeadd-4",level:3},{value:"_authorizeMint",id:"_authorizemint-4",level:3},{value:"_parseData",id:"_parsedata-4",level:3},{value:"_storeContributorsClaims",id:"_storecontributorsclaims-4",level:3},{value:"_hasKey",id:"_haskey-4",level:3}],u={toc:o};function m(t){let{components:e,...a}=t;return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"solidity-api"},"Solidity API"),(0,l.kt)("h2",{id:"erc3525upgradeable"},"ERC3525Upgradeable"),(0,l.kt)("h3",{id:"approvedata"},"ApproveData"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"struct ApproveData {\n  address[] approvals;\n  mapping(address => uint256) allowances;\n}\n\n")),(0,l.kt)("h3",{id:"_values"},"_","values"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(uint256 => uint256) _values\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"tokenId => values")),(0,l.kt)("h3",{id:"_approvedvalues"},"_","approvedValues"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(uint256 => struct ERC3525Upgradeable.ApproveData) _approvedValues\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"tokenId => operator => units")),(0,l.kt)("h3",{id:"_slots"},"_","slots"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(uint256 => uint256) _slots\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"tokenId => slot")),(0,l.kt)("h3",{id:"_name"},"_","name"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"string _name\n")),(0,l.kt)("h3",{id:"_symbol"},"_","symbol"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"string _symbol\n")),(0,l.kt)("h3",{id:"_decimals"},"_","decimals"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"uint8 _decimals\n")),(0,l.kt)("h3",{id:"initialize"},"initialize"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function initialize() public virtual\n")),(0,l.kt)("p",null,"Contract initialization logic"),(0,l.kt)("h3",{id:"supportsinterface"},"supportsInterface"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function supportsInterface(bytes4 interfaceId) public view virtual returns (bool)\n")),(0,l.kt)("h3",{id:"valuedecimals"},"valueDecimals"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function valueDecimals() public view virtual returns (uint8)\n")),(0,l.kt)("p",null,"Get the number of decimals the token uses for value - e.g. 6, means the user\nrepresentation of the value of a token can be calculated by dividing it by 1,000,000.\nConsidering the compatibility with third-party wallets, this function is defined as\n",(0,l.kt)("inlineCode",{parentName:"p"},"valueDecimals()")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"decimals()")," to avoid conflict with EIP-20 tokens."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of decimals for value")))),(0,l.kt)("h3",{id:"balanceof"},"balanceOf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function balanceOf(uint256 tokenId_) public view virtual returns (uint256)\n")),(0,l.kt)("h3",{id:"slotof"},"slotOf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function slotOf(uint256 tokenId_) public view virtual returns (uint256)\n")),(0,l.kt)("h3",{id:"contracturi"},"contractURI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function contractURI() public view virtual returns (string)\n")),(0,l.kt)("p",null,"Returns the Uniform Resource Identifier (URI) for the current ERC3525 contract."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"This function SHOULD return the URI for this contract in JSON format, starting with\nheader ",(0,l.kt)("inlineCode",{parentName:"em"},"data:application/json;"),".\nSee ",(0,l.kt)("a",{parentName:"em",href:"https://eips.ethereum.org/EIPS/eip-3525"},"https://eips.ethereum.org/EIPS/eip-3525")," for the JSON schema for contract URI.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The JSON formatted URI of the current ERC3525 contract")))),(0,l.kt)("h3",{id:"sloturi"},"slotURI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function slotURI(uint256 slot_) public view virtual returns (string)\n")),(0,l.kt)("h3",{id:"approve"},"approve"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function approve(uint256 tokenId_, address to_, uint256 value_) external payable virtual\n")),(0,l.kt)("h3",{id:"allowance"},"allowance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function allowance(uint256 tokenId_, address operator_) public view virtual returns (uint256)\n")),(0,l.kt)("h3",{id:"tokenuri"},"tokenURI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function tokenURI(uint256 tokenId) public view virtual returns (string)\n")),(0,l.kt)("p",null,"Auto-generated by ",(0,l.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/4.x/wizard"},"https://docs.openzeppelin.com/contracts/4.x/wizard")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Selects which base implementation to call")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the token")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the token")))),(0,l.kt)("h3",{id:"transferfrom"},"transferFrom"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function transferFrom(uint256 fromTokenId_, address to_, uint256 value_) public payable virtual returns (uint256)\n")),(0,l.kt)("h3",{id:"transferfrom-1"},"transferFrom"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function transferFrom(uint256 fromTokenId_, uint256 toTokenId_, uint256 value_) public payable virtual\n")),(0,l.kt)("h3",{id:"_mint"},"_","mint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _mint(address to_, uint256 tokenId_, uint256 slot_) private\n")),(0,l.kt)("h3",{id:"_mintvalue"},"_","mintValue"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _mintValue(address to_, uint256 tokenId_, uint256 slot_, uint256 value_) internal virtual\n")),(0,l.kt)("h3",{id:"_burn"},"_","burn"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _burn(uint256 tokenId_) internal virtual\n")),(0,l.kt)("h3",{id:"_transfer"},"_","transfer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _transfer(uint256 fromTokenId_, uint256 toTokenId_, uint256 value_) internal virtual\n")),(0,l.kt)("h3",{id:"_spendallowance"},"_","spendAllowance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _spendAllowance(address operator_, uint256 tokenId_, uint256 value_) internal virtual\n")),(0,l.kt)("h3",{id:"_approvevalue"},"_","approveValue"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _approveValue(uint256 tokenId_, address to_, uint256 value_) internal virtual\n")),(0,l.kt)("h3",{id:"_getnewtokenid"},"_","getNewTokenId"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _getNewTokenId(uint256) internal virtual returns (uint256)\n")),(0,l.kt)("h3",{id:"_beforetokentransfer"},"_","beforeTokenTransfer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _beforeTokenTransfer(address, address, uint256 tokenId) internal virtual\n")),(0,l.kt)("h3",{id:"_aftertokentransfer"},"_","afterTokenTransfer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _afterTokenTransfer(address from, address to, uint256 tokenId) internal virtual\n")),(0,l.kt)("p",null,"_","Hook that is called after any transfer of tokens. This includes\nminting and burning."),(0,l.kt)("p",null,"Calling conditions:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"when ",(0,l.kt)("inlineCode",{parentName:"li"},"from")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"to")," are both non-zero."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"from")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"to")," are never both zero.")),(0,l.kt)("p",null,"To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks","[Using Hooks]",".","_"),(0,l.kt)("h3",{id:"_checkonerc3525received"},"_","checkOnERC3525Received"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _checkOnERC3525Received(uint256 fromTokenId_, uint256 toTokenId_, uint256 value_, bytes data_) private returns (bool)\n")),(0,l.kt)("h3",{id:"_beforevaluetransfer"},"_","beforeValueTransfer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _beforeValueTransfer(address from_, address to_, uint256 fromTokenId_, uint256 toTokenId_, uint256 slot_, uint256 value_) internal virtual\n")),(0,l.kt)("h3",{id:"_aftervaluetransfer"},"_","afterValueTransfer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _afterValueTransfer(address from_, address to_, uint256 fromTokenId_, uint256 toTokenId_, uint256 slot_, uint256 value_) internal virtual\n")),(0,l.kt)("h2",{id:"ierc3525metadataupgradeable"},"IERC3525MetadataUpgradeable"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Interfaces for any contract that wants to support query of the Uniform Resource Identifier\n(URI) for the ERC3525 contract as well as a specified slot.\nBecause of the higher reliability of data stored in smart contracts compared to data stored in\ncentralized systems, it is recommended that metadata, including ",(0,l.kt)("inlineCode",{parentName:"em"},"contractURI"),", ",(0,l.kt)("inlineCode",{parentName:"em"},"slotURI")," and\n",(0,l.kt)("inlineCode",{parentName:"em"},"tokenURI"),", be directly returned in JSON format, instead of being returned with a url pointing\nto any resource stored in a centralized system.\nSee ",(0,l.kt)("a",{parentName:"em",href:"https://eips.ethereum.org/EIPS/eip-3525"},"https://eips.ethereum.org/EIPS/eip-3525"),"\nNote: the ERC-165 identifier for this interface is 0xe1600902.")),(0,l.kt)("h3",{id:"contracturi-1"},"contractURI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function contractURI() external view returns (string)\n")),(0,l.kt)("p",null,"Returns the Uniform Resource Identifier (URI) for the current ERC3525 contract."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"This function SHOULD return the URI for this contract in JSON format, starting with\nheader ",(0,l.kt)("inlineCode",{parentName:"em"},"data:application/json;"),".\nSee ",(0,l.kt)("a",{parentName:"em",href:"https://eips.ethereum.org/EIPS/eip-3525"},"https://eips.ethereum.org/EIPS/eip-3525")," for the JSON schema for contract URI.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The JSON formatted URI of the current ERC3525 contract")))),(0,l.kt)("h3",{id:"sloturi-1"},"slotURI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function slotURI(uint256 _slot) external view returns (string)\n")),(0,l.kt)("p",null,"Returns the Uniform Resource Identifier (URI) for the specified slot."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"This function SHOULD return the URI for ",(0,l.kt)("inlineCode",{parentName:"em"},"_slot")," in JSON format, starting with header\n",(0,l.kt)("inlineCode",{parentName:"em"},"data:application/json;"),".\nSee ",(0,l.kt)("a",{parentName:"em",href:"https://eips.ethereum.org/EIPS/eip-3525"},"https://eips.ethereum.org/EIPS/eip-3525")," for the JSON schema for slot URI.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The JSON formatted URI of ",(0,l.kt)("inlineCode",{parentName:"td"},"_slot"))))),(0,l.kt)("h2",{id:"ierc3525receiver"},"IERC3525Receiver"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Interface for any contract that wants to be informed by EIP-3525 contracts when receiving values from other\naddresses.\nNote: the EIP-165 identifier for this interface is 0x009ce20b.")),(0,l.kt)("h3",{id:"onerc3525received"},"onERC3525Received"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function onERC3525Received(address _operator, uint256 _fromTokenId, uint256 _toTokenId, uint256 _value, bytes _data) external returns (bytes4)\n")),(0,l.kt)("p",null,"Handle the receipt of an EIP-3525 token value."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"An EIP-3525 smart contract MUST check whether this function is implemented by the recipient contract, if the\nrecipient contract implements this function, the EIP-3525 contract MUST call this function after a\nvalue transfer (i.e. ",(0,l.kt)("inlineCode",{parentName:"em"},"transferFrom(uint256,uint256,uint256,bytes)"),").\nMUST return 0x009ce20b (i.e. ",(0,l.kt)("inlineCode",{parentName:"em"},"bytes4(keccak256('onERC3525Received(address,uint256,uint256, uint256,bytes)'))"),") if the transfer is accepted.\nMUST revert or return any value other than 0x009ce20b if the transfer is rejected.\nThe EIP-3525 smart contract that calls this function MUST revert the transfer transaction if the return value\nis not equal to 0x009ce20b.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","operator"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The address which triggered the transfer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","fromTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token id to transfer value from")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","toTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token id to transfer value to")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","value"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The transferred value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"Additional data with no specified format")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes4"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bytes4(keccak256('onERC3525Received(address,uint256,uint256,uint256,bytes)'))")," unless the transfer is rejected.")))),(0,l.kt)("h2",{id:"ierc3525upgradeable"},"IERC3525Upgradeable"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"See ",(0,l.kt)("a",{parentName:"em",href:"https://eips.ethereum.org/EIPS/eip-3525"},"https://eips.ethereum.org/EIPS/eip-3525"))),(0,l.kt)("h3",{id:"transfervalue"},"TransferValue"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event TransferValue(uint256 _fromTokenId, uint256 _toTokenId, uint256 _value)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"MUST emit when value of a token is transferred to another token with the same slot,\nincluding zero value transfers (","_","value == 0) as well as transfers when tokens are created\n(",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," == 0) or destroyed (",(0,l.kt)("inlineCode",{parentName:"em"},"_toTokenId")," == 0).")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","fromTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token id to transfer value from")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","toTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token id to transfer value to")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","value"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The transferred value")))),(0,l.kt)("h3",{id:"approvalvalue"},"ApprovalValue"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ApprovalValue(uint256 _tokenId, address _operator, uint256 _value)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"MUST emit when the approval value of a token is set or changed.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token to approve")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","operator"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The operator to approve for")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","value"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum value that ",(0,l.kt)("inlineCode",{parentName:"td"},"_operator")," is allowed to manage")))),(0,l.kt)("h3",{id:"slotchanged"},"SlotChanged"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event SlotChanged(uint256 _tokenId, uint256 _oldSlot, uint256 _newSlot)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"MUST emit when the slot of a token is set or changed.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token of which slot is set or changed")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","oldSlot"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The previous slot of the token")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","newSlot"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The updated slot of the token")))),(0,l.kt)("h3",{id:"valuedecimals-1"},"valueDecimals"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function valueDecimals() external view returns (uint8)\n")),(0,l.kt)("p",null,"Get the number of decimals the token uses for value - e.g. 6, means the user\nrepresentation of the value of a token can be calculated by dividing it by 1,000,000.\nConsidering the compatibility with third-party wallets, this function is defined as\n",(0,l.kt)("inlineCode",{parentName:"p"},"valueDecimals()")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"decimals()")," to avoid conflict with EIP-20 tokens."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of decimals for value")))),(0,l.kt)("h3",{id:"balanceof-1"},"balanceOf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function balanceOf(uint256 _tokenId) external view returns (uint256)\n")),(0,l.kt)("p",null,"Get the value of a token."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token for which to query the balance")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The value of ",(0,l.kt)("inlineCode",{parentName:"td"},"_tokenId"))))),(0,l.kt)("h3",{id:"slotof-1"},"slotOf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function slotOf(uint256 _tokenId) external view returns (uint256)\n")),(0,l.kt)("p",null,"Get the slot of a token."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The identifier for a token")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The slot of the token")))),(0,l.kt)("h3",{id:"approve-1"},"approve"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function approve(uint256 _tokenId, address _operator, uint256 _value) external payable\n")),(0,l.kt)("p",null,"Allow an operator to manage the value of a token, up to the ",(0,l.kt)("inlineCode",{parentName:"p"},"_value"),"."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"MUST revert unless caller is the current owner, an authorized operator, or the approved\naddress for ",(0,l.kt)("inlineCode",{parentName:"em"},"_tokenId"),".\nMUST emit the ApprovalValue event.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token to approve")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","operator"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The operator to be approved")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","value"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum value of ",(0,l.kt)("inlineCode",{parentName:"td"},"_toTokenId")," that ",(0,l.kt)("inlineCode",{parentName:"td"},"_operator")," is allowed to manage")))),(0,l.kt)("h3",{id:"allowance-1"},"allowance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function allowance(uint256 _tokenId, address _operator) external view returns (uint256)\n")),(0,l.kt)("p",null,"Get the maximum value of a token that an operator is allowed to manage."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token for which to query the allowance")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","operator"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The address of an operator")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The current approval value of ",(0,l.kt)("inlineCode",{parentName:"td"},"_tokenId")," that ",(0,l.kt)("inlineCode",{parentName:"td"},"_operator")," is allowed to manage")))),(0,l.kt)("h3",{id:"transferfrom-2"},"transferFrom"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function transferFrom(uint256 _fromTokenId, uint256 _toTokenId, uint256 _value) external payable\n")),(0,l.kt)("p",null,"Transfer value from a specified token to another specified token with the same slot."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Caller MUST be the current owner, an authorized operator or an operator who has been\napproved the whole ",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," or part of it.\nMUST revert if ",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," or ",(0,l.kt)("inlineCode",{parentName:"em"},"_toTokenId")," is zero token id or does not exist.\nMUST revert if slots of ",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," and ",(0,l.kt)("inlineCode",{parentName:"em"},"_toTokenId")," do not match.\nMUST revert if ",(0,l.kt)("inlineCode",{parentName:"em"},"_value")," exceeds the balance of ",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," or its allowance to the\noperator.\nMUST emit ",(0,l.kt)("inlineCode",{parentName:"em"},"TransferValue")," event.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","fromTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token to transfer value from")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","toTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token to transfer value to")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","value"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The transferred value")))),(0,l.kt)("h3",{id:"transferfrom-3"},"transferFrom"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function transferFrom(uint256 _fromTokenId, address _to, uint256 _value) external payable returns (uint256)\n")),(0,l.kt)("p",null,"Transfer value from a specified token to an address. The caller should confirm that\n",(0,l.kt)("inlineCode",{parentName:"p"},"_to")," is capable of receiving EIP-3525 tokens."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"This function MUST create a new EIP-3525 token with the same slot for ",(0,l.kt)("inlineCode",{parentName:"em"},"_to"),",\nor find an existing token with the same slot owned by ",(0,l.kt)("inlineCode",{parentName:"em"},"_to"),", to receive the transferred value.\nMUST revert if ",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," is zero token id or does not exist.\nMUST revert if ",(0,l.kt)("inlineCode",{parentName:"em"},"_to")," is zero address.\nMUST revert if ",(0,l.kt)("inlineCode",{parentName:"em"},"_value")," exceeds the balance of ",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," or its allowance to the\noperator.\nMUST emit ",(0,l.kt)("inlineCode",{parentName:"em"},"Transfer")," and ",(0,l.kt)("inlineCode",{parentName:"em"},"TransferValue")," events.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","fromTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token to transfer value from")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","to"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The address to transfer value to")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","value"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The transferred value")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"ID of the token which receives the transferred value")))),(0,l.kt)("h2",{id:"erc3525upgradeable-1"},"ERC3525Upgradeable"),(0,l.kt)("h3",{id:"approvedata-1"},"ApproveData"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"struct ApproveData {\n  address[] approvals;\n  mapping(address => uint256) allowances;\n}\n\n")),(0,l.kt)("h3",{id:"_values-1"},"_","values"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(uint256 => uint256) _values\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"tokenId => values")),(0,l.kt)("h3",{id:"_approvedvalues-1"},"_","approvedValues"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(uint256 => struct ERC3525Upgradeable.ApproveData) _approvedValues\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"tokenId => operator => units")),(0,l.kt)("h3",{id:"_slots-1"},"_","slots"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(uint256 => uint256) _slots\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"tokenId => slot")),(0,l.kt)("h3",{id:"_name-1"},"_","name"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"string _name\n")),(0,l.kt)("h3",{id:"_symbol-1"},"_","symbol"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"string _symbol\n")),(0,l.kt)("h3",{id:"_decimals-1"},"_","decimals"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"uint8 _decimals\n")),(0,l.kt)("h3",{id:"initialize-1"},"initialize"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function initialize() public virtual\n")),(0,l.kt)("p",null,"Contract initialization logic"),(0,l.kt)("h3",{id:"supportsinterface-1"},"supportsInterface"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function supportsInterface(bytes4 interfaceId) public view virtual returns (bool)\n")),(0,l.kt)("h3",{id:"valuedecimals-2"},"valueDecimals"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function valueDecimals() public view virtual returns (uint8)\n")),(0,l.kt)("p",null,"Get the number of decimals the token uses for value - e.g. 6, means the user\nrepresentation of the value of a token can be calculated by dividing it by 1,000,000.\nConsidering the compatibility with third-party wallets, this function is defined as\n",(0,l.kt)("inlineCode",{parentName:"p"},"valueDecimals()")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"decimals()")," to avoid conflict with EIP-20 tokens."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of decimals for value")))),(0,l.kt)("h3",{id:"balanceof-2"},"balanceOf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function balanceOf(uint256 tokenId_) public view virtual returns (uint256)\n")),(0,l.kt)("h3",{id:"slotof-2"},"slotOf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function slotOf(uint256 tokenId_) public view virtual returns (uint256)\n")),(0,l.kt)("h3",{id:"contracturi-2"},"contractURI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function contractURI() public view virtual returns (string)\n")),(0,l.kt)("p",null,"Returns the Uniform Resource Identifier (URI) for the current ERC3525 contract."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"This function SHOULD return the URI for this contract in JSON format, starting with\nheader ",(0,l.kt)("inlineCode",{parentName:"em"},"data:application/json;"),".\nSee ",(0,l.kt)("a",{parentName:"em",href:"https://eips.ethereum.org/EIPS/eip-3525"},"https://eips.ethereum.org/EIPS/eip-3525")," for the JSON schema for contract URI.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The JSON formatted URI of the current ERC3525 contract")))),(0,l.kt)("h3",{id:"sloturi-2"},"slotURI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function slotURI(uint256 slot_) public view virtual returns (string)\n")),(0,l.kt)("h3",{id:"approve-2"},"approve"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function approve(uint256 tokenId_, address to_, uint256 value_) external payable virtual\n")),(0,l.kt)("h3",{id:"allowance-2"},"allowance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function allowance(uint256 tokenId_, address operator_) public view virtual returns (uint256)\n")),(0,l.kt)("h3",{id:"tokenuri-1"},"tokenURI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function tokenURI(uint256 tokenId) public view virtual returns (string)\n")),(0,l.kt)("p",null,"Auto-generated by ",(0,l.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/4.x/wizard"},"https://docs.openzeppelin.com/contracts/4.x/wizard")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Selects which base implementation to call")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the token")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the token")))),(0,l.kt)("h3",{id:"transferfrom-4"},"transferFrom"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function transferFrom(uint256 fromTokenId_, address to_, uint256 value_) public payable virtual returns (uint256)\n")),(0,l.kt)("h3",{id:"transferfrom-5"},"transferFrom"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function transferFrom(uint256 fromTokenId_, uint256 toTokenId_, uint256 value_) public payable virtual\n")),(0,l.kt)("h3",{id:"_mint-1"},"_","mint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _mint(address to_, uint256 tokenId_, uint256 slot_) private\n")),(0,l.kt)("h3",{id:"_mintvalue-1"},"_","mintValue"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _mintValue(address to_, uint256 tokenId_, uint256 slot_, uint256 value_) internal virtual\n")),(0,l.kt)("h3",{id:"_burn-1"},"_","burn"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _burn(uint256 tokenId_) internal virtual\n")),(0,l.kt)("h3",{id:"_transfer-1"},"_","transfer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _transfer(uint256 fromTokenId_, uint256 toTokenId_, uint256 value_) internal virtual\n")),(0,l.kt)("h3",{id:"_spendallowance-1"},"_","spendAllowance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _spendAllowance(address operator_, uint256 tokenId_, uint256 value_) internal virtual\n")),(0,l.kt)("h3",{id:"_approvevalue-1"},"_","approveValue"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _approveValue(uint256 tokenId_, address to_, uint256 value_) internal virtual\n")),(0,l.kt)("h3",{id:"_getnewtokenid-1"},"_","getNewTokenId"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _getNewTokenId(uint256) internal virtual returns (uint256)\n")),(0,l.kt)("h3",{id:"_beforetokentransfer-1"},"_","beforeTokenTransfer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _beforeTokenTransfer(address, address, uint256 tokenId) internal virtual\n")),(0,l.kt)("h3",{id:"_aftertokentransfer-1"},"_","afterTokenTransfer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _afterTokenTransfer(address from, address to, uint256 tokenId) internal virtual\n")),(0,l.kt)("p",null,"_","Hook that is called after any transfer of tokens. This includes\nminting and burning."),(0,l.kt)("p",null,"Calling conditions:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"when ",(0,l.kt)("inlineCode",{parentName:"li"},"from")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"to")," are both non-zero."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"from")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"to")," are never both zero.")),(0,l.kt)("p",null,"To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks","[Using Hooks]",".","_"),(0,l.kt)("h3",{id:"_checkonerc3525received-1"},"_","checkOnERC3525Received"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _checkOnERC3525Received(uint256 fromTokenId_, uint256 toTokenId_, uint256 value_, bytes data_) private returns (bool)\n")),(0,l.kt)("h3",{id:"_beforevaluetransfer-1"},"_","beforeValueTransfer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _beforeValueTransfer(address from_, address to_, uint256 fromTokenId_, uint256 toTokenId_, uint256 slot_, uint256 value_) internal virtual\n")),(0,l.kt)("h3",{id:"_aftervaluetransfer-1"},"_","afterValueTransfer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _afterValueTransfer(address from_, address to_, uint256 fromTokenId_, uint256 toTokenId_, uint256 slot_, uint256 value_) internal virtual\n")),(0,l.kt)("h2",{id:"hypercertminterv0"},"HypercertMinterV0"),(0,l.kt)("p",null,"Contains functions and events to initialize and issue a hypercertificate"),(0,l.kt)("h3",{id:"name"},"NAME"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"string NAME\n")),(0,l.kt)("p",null,"Contract name"),(0,l.kt)("h3",{id:"upgrader_role"},"UPGRADER_ROLE"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes32 UPGRADER_ROLE\n")),(0,l.kt)("p",null,"User role required in order to upgrade the contract"),(0,l.kt)("h3",{id:"default_units"},"DEFAULT_UNITS"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"uint256 DEFAULT_UNITS\n")),(0,l.kt)("p",null,"@notice"),(0,l.kt)("h3",{id:"_version"},"_","version"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"uint16 _version\n")),(0,l.kt)("p",null,"Current version of the contract"),(0,l.kt)("h3",{id:"_counter"},"_","counter"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"uint256 _counter\n")),(0,l.kt)("p",null,"Counter incremented to form the hypercertificate ID"),(0,l.kt)("h3",{id:"workscopes"},"workScopes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(bytes32 => string) workScopes\n")),(0,l.kt)("p",null,"Mapping of id's to work-scopes"),(0,l.kt)("h3",{id:"impactscopes"},"impactScopes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(bytes32 => string) impactScopes\n")),(0,l.kt)("p",null,"Mapping of id's to impact-scopes"),(0,l.kt)("h3",{id:"rights"},"rights"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(bytes32 => string) rights\n")),(0,l.kt)("p",null,"Mapping of id's to rights"),(0,l.kt)("h3",{id:"_contributorimpacts"},"_","contributorImpacts"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(address => mapping(bytes32 => bool)) _contributorImpacts\n")),(0,l.kt)("h3",{id:"_impactcerts"},"_","impactCerts"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(uint256 => struct HypercertMinterV0.Claim) _impactCerts\n")),(0,l.kt)("h3",{id:"claim"},"Claim"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"struct Claim {\n  bytes32 claimHash;\n  uint64[2] workTimeframe;\n  uint64[2] impactTimeframe;\n  bytes32[] workScopes;\n  bytes32[] impactScopes;\n  bytes32[] rights;\n  address[] contributors;\n  uint16 version;\n  bool exists;\n}\n\n")),(0,l.kt)("h3",{id:"impactclaimed"},"ImpactClaimed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ImpactClaimed(uint256 id, address minter, bytes32 claimHash, address[] contributors, uint64[2] workTimeframe, uint64[2] impactTimeframe, bytes32[] workScopes, bytes32[] impactScopes, bytes32[] rights, uint64 version, string uri)\n")),(0,l.kt)("p",null,"Emitted when an impact is claimed."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the claimed impact.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"minter"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"Address of cert minter.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claimHash"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Hash value of the claim data.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"contributors"),(0,l.kt)("td",{parentName:"tr",align:null},"address[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Contributors to the claimed impact.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"workTimeframe"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64","[2]"),(0,l.kt)("td",{parentName:"tr",align:null},"To/from date of the work related to the claim.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"impactTimeframe"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64","[2]"),(0,l.kt)("td",{parentName:"tr",align:null},"To/from date of the claimed impact.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"workScopes"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Id's relating to the scope of the work.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"impactScopes"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Id's relating to the scope of the impact.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rights"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Id's relating to the rights applied to the hypercert.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"version"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64"),(0,l.kt)("td",{parentName:"tr",align:null},"Version of the hypercert.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uri"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the metadata of the hypercert.")))),(0,l.kt)("h3",{id:"impactscopeadded"},"ImpactScopeAdded"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ImpactScopeAdded(bytes32 id, string text)\n")),(0,l.kt)("p",null,"Emitted when a new impact scope is added."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the impact scope.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Short text code of the impact scope.")))),(0,l.kt)("h3",{id:"rightadded"},"RightAdded"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event RightAdded(bytes32 id, string text)\n")),(0,l.kt)("p",null,"Emitted when a new right is added."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the right.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Short text code of the right.")))),(0,l.kt)("h3",{id:"workscopeadded"},"WorkScopeAdded"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event WorkScopeAdded(bytes32 id, string text)\n")),(0,l.kt)("p",null,"Emitted when a new work scope is added."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the work scope.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Short text code of the work scope.")))),(0,l.kt)("h3",{id:"constructor"},"constructor"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"constructor() public\n")),(0,l.kt)("p",null,"Contract constructor logic"),(0,l.kt)("h3",{id:"initialize-2"},"initialize"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function initialize() public\n")),(0,l.kt)("p",null,"Contract initialization logic"),(0,l.kt)("h3",{id:"addimpactscope"},"addImpactScope"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function addImpactScope(string text) public returns (bytes32 id)\n")),(0,l.kt)("p",null,"Adds a new impact scope"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Text representing the impact scope")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the impact scope")))),(0,l.kt)("h3",{id:"addright"},"addRight"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function addRight(string text) public returns (bytes32 id)\n")),(0,l.kt)("p",null,"Adds a new right"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Text representing the right")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the right")))),(0,l.kt)("h3",{id:"addworkscope"},"addWorkScope"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function addWorkScope(string text) public returns (bytes32 id)\n")),(0,l.kt)("p",null,"Adds a new work scope"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Text representing the work scope")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the work scope")))),(0,l.kt)("h3",{id:"mint"},"mint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function mint(address account, bytes data) public virtual\n")),(0,l.kt)("p",null,"Issues a new hypercertificate"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"account"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"Account issuing the new hypercertificate")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"Data representing the parameters of the claim")))),(0,l.kt)("h3",{id:"getimpactcert"},"getImpactCert"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function getImpactCert(uint256 claimID) public view returns (struct HypercertMinterV0.Claim)\n")),(0,l.kt)("p",null,"Gets the impact claim with the specified id"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claimID"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the claim")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"struct HypercertMinterV0.Claim"),(0,l.kt)("td",{parentName:"tr",align:null},"The claim, if it doesn't exist with default values")))),(0,l.kt)("h3",{id:"version"},"version"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function version() public view virtual returns (uint256)\n")),(0,l.kt)("p",null,"gets the current version of the contract"),(0,l.kt)("h3",{id:"updateversion"},"updateVersion"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function updateVersion() external\n")),(0,l.kt)("p",null,"Update the contract version number\nOnly allowed for member of UPGRADER_ROLE"),(0,l.kt)("h3",{id:"supportsinterface-2"},"supportsInterface"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function supportsInterface(bytes4 interfaceId) public view returns (bool)\n")),(0,l.kt)("p",null,"Returns a flag indicating if the contract supports the specified interface"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"interfaceId"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes4"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the interface")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"true, if the interface is supported")))),(0,l.kt)("h3",{id:"_authorizeupgrade"},"_","authorizeUpgrade"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _authorizeUpgrade(address) internal view\n")),(0,l.kt)("p",null,"upgrade authorization logic"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"adds onlyRole(UPGRADER_ROLE) requirement")),(0,l.kt)("h3",{id:"_authorizeadd"},"_","authorizeAdd"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _authorizeAdd(string text, mapping(bytes32 => string) map) internal view virtual returns (bytes32 id)\n")),(0,l.kt)("p",null,"Pre-add validation checks"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Text to be added")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"map"),(0,l.kt)("td",{parentName:"tr",align:null},"mapping(bytes32 ","=",">"," string)"),(0,l.kt)("td",{parentName:"tr",align:null},"Storage mapping that will be appended")))),(0,l.kt)("h3",{id:"_authorizemint"},"_","authorizeMint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _authorizeMint(address account, struct HypercertMinterV0.Claim claim) internal view virtual\n")),(0,l.kt)("p",null,"Pre-mint validation checks"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"account"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"Destination address for the mint")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claim"),(0,l.kt)("td",{parentName:"tr",align:null},"struct HypercertMinterV0.Claim"),(0,l.kt)("td",{parentName:"tr",align:null},"Impact claim data")))),(0,l.kt)("h3",{id:"_parsedata"},"_","parseData"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _parseData(bytes data) internal pure virtual returns (struct HypercertMinterV0.Claim claim, string)\n")),(0,l.kt)("p",null,"Parse bytes to Claim and URI"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"This function is overridable in order to support future schema changes")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"Byte data representing the claim")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claim"),(0,l.kt)("td",{parentName:"tr",align:null},"struct HypercertMinterV0.Claim"),(0,l.kt)("td",{parentName:"tr",align:null},"The parsed Claim struct")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[1]"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Claim metadata URI")))),(0,l.kt)("h3",{id:"_storecontributorsclaims"},"_","storeContributorsClaims"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _storeContributorsClaims(bytes32 claimHash, address[] creators) internal\n")),(0,l.kt)("p",null,"Stores contributor claims in the ",(0,l.kt)("inlineCode",{parentName:"p"},"contributorImpacts")," mapping; guards against overlapping claims"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claimHash"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Claim data hash-code value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"creators"),(0,l.kt)("td",{parentName:"tr",align:null},"address[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Array of addresses for contributors")))),(0,l.kt)("h3",{id:"_hash"},"_","hash"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _hash(string value) internal pure returns (bytes32)\n")),(0,l.kt)("p",null,"Hash the specified string value"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"string to hash")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"a keccak256 hash-code")))),(0,l.kt)("h3",{id:"_haskey"},"_","hasKey"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _hasKey(mapping(bytes32 => string) map, bytes32 key) internal view returns (bool)\n")),(0,l.kt)("p",null,"Checks whether the supplied mapping contains the supplied key"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"map"),(0,l.kt)("td",{parentName:"tr",align:null},"mapping(bytes32 ","=",">"," string)"),(0,l.kt)("td",{parentName:"tr",align:null},"mapping to search")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"key"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"key to search")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"true, if the key exists in the mapping")))),(0,l.kt)("h2",{id:"ierc3525metadataupgradeable-1"},"IERC3525MetadataUpgradeable"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Interfaces for any contract that wants to support query of the Uniform Resource Identifier\n(URI) for the ERC3525 contract as well as a specified slot.\nBecause of the higher reliability of data stored in smart contracts compared to data stored in\ncentralized systems, it is recommended that metadata, including ",(0,l.kt)("inlineCode",{parentName:"em"},"contractURI"),", ",(0,l.kt)("inlineCode",{parentName:"em"},"slotURI")," and\n",(0,l.kt)("inlineCode",{parentName:"em"},"tokenURI"),", be directly returned in JSON format, instead of being returned with a url pointing\nto any resource stored in a centralized system.\nSee ",(0,l.kt)("a",{parentName:"em",href:"https://eips.ethereum.org/EIPS/eip-3525"},"https://eips.ethereum.org/EIPS/eip-3525"),"\nNote: the ERC-165 identifier for this interface is 0xe1600902.")),(0,l.kt)("h3",{id:"contracturi-3"},"contractURI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function contractURI() external view returns (string)\n")),(0,l.kt)("p",null,"Returns the Uniform Resource Identifier (URI) for the current ERC3525 contract."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"This function SHOULD return the URI for this contract in JSON format, starting with\nheader ",(0,l.kt)("inlineCode",{parentName:"em"},"data:application/json;"),".\nSee ",(0,l.kt)("a",{parentName:"em",href:"https://eips.ethereum.org/EIPS/eip-3525"},"https://eips.ethereum.org/EIPS/eip-3525")," for the JSON schema for contract URI.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The JSON formatted URI of the current ERC3525 contract")))),(0,l.kt)("h3",{id:"sloturi-3"},"slotURI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function slotURI(uint256 _slot) external view returns (string)\n")),(0,l.kt)("p",null,"Returns the Uniform Resource Identifier (URI) for the specified slot."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"This function SHOULD return the URI for ",(0,l.kt)("inlineCode",{parentName:"em"},"_slot")," in JSON format, starting with header\n",(0,l.kt)("inlineCode",{parentName:"em"},"data:application/json;"),".\nSee ",(0,l.kt)("a",{parentName:"em",href:"https://eips.ethereum.org/EIPS/eip-3525"},"https://eips.ethereum.org/EIPS/eip-3525")," for the JSON schema for slot URI.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The JSON formatted URI of ",(0,l.kt)("inlineCode",{parentName:"td"},"_slot"))))),(0,l.kt)("h2",{id:"ierc3525receiver-1"},"IERC3525Receiver"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Interface for any contract that wants to be informed by EIP-3525 contracts when receiving values from other\naddresses.\nNote: the EIP-165 identifier for this interface is 0x009ce20b.")),(0,l.kt)("h3",{id:"onerc3525received-1"},"onERC3525Received"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function onERC3525Received(address _operator, uint256 _fromTokenId, uint256 _toTokenId, uint256 _value, bytes _data) external returns (bytes4)\n")),(0,l.kt)("p",null,"Handle the receipt of an EIP-3525 token value."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"An EIP-3525 smart contract MUST check whether this function is implemented by the recipient contract, if the\nrecipient contract implements this function, the EIP-3525 contract MUST call this function after a\nvalue transfer (i.e. ",(0,l.kt)("inlineCode",{parentName:"em"},"transferFrom(uint256,uint256,uint256,bytes)"),").\nMUST return 0x009ce20b (i.e. ",(0,l.kt)("inlineCode",{parentName:"em"},"bytes4(keccak256('onERC3525Received(address,uint256,uint256, uint256,bytes)'))"),") if the transfer is accepted.\nMUST revert or return any value other than 0x009ce20b if the transfer is rejected.\nThe EIP-3525 smart contract that calls this function MUST revert the transfer transaction if the return value\nis not equal to 0x009ce20b.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","operator"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The address which triggered the transfer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","fromTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token id to transfer value from")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","toTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token id to transfer value to")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","value"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The transferred value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"Additional data with no specified format")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes4"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bytes4(keccak256('onERC3525Received(address,uint256,uint256,uint256,bytes)'))")," unless the transfer is rejected.")))),(0,l.kt)("h2",{id:"ierc3525upgradeable-1"},"IERC3525Upgradeable"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"See ",(0,l.kt)("a",{parentName:"em",href:"https://eips.ethereum.org/EIPS/eip-3525"},"https://eips.ethereum.org/EIPS/eip-3525"))),(0,l.kt)("h3",{id:"transfervalue-1"},"TransferValue"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event TransferValue(uint256 _fromTokenId, uint256 _toTokenId, uint256 _value)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"MUST emit when value of a token is transferred to another token with the same slot,\nincluding zero value transfers (","_","value == 0) as well as transfers when tokens are created\n(",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," == 0) or destroyed (",(0,l.kt)("inlineCode",{parentName:"em"},"_toTokenId")," == 0).")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","fromTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token id to transfer value from")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","toTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token id to transfer value to")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","value"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The transferred value")))),(0,l.kt)("h3",{id:"approvalvalue-1"},"ApprovalValue"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ApprovalValue(uint256 _tokenId, address _operator, uint256 _value)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"MUST emit when the approval value of a token is set or changed.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token to approve")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","operator"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The operator to approve for")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","value"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum value that ",(0,l.kt)("inlineCode",{parentName:"td"},"_operator")," is allowed to manage")))),(0,l.kt)("h3",{id:"slotchanged-1"},"SlotChanged"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event SlotChanged(uint256 _tokenId, uint256 _oldSlot, uint256 _newSlot)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"MUST emit when the slot of a token is set or changed.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token of which slot is set or changed")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","oldSlot"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The previous slot of the token")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","newSlot"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The updated slot of the token")))),(0,l.kt)("h3",{id:"valuedecimals-3"},"valueDecimals"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function valueDecimals() external view returns (uint8)\n")),(0,l.kt)("p",null,"Get the number of decimals the token uses for value - e.g. 6, means the user\nrepresentation of the value of a token can be calculated by dividing it by 1,000,000.\nConsidering the compatibility with third-party wallets, this function is defined as\n",(0,l.kt)("inlineCode",{parentName:"p"},"valueDecimals()")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"decimals()")," to avoid conflict with EIP-20 tokens."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of decimals for value")))),(0,l.kt)("h3",{id:"balanceof-3"},"balanceOf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function balanceOf(uint256 _tokenId) external view returns (uint256)\n")),(0,l.kt)("p",null,"Get the value of a token."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token for which to query the balance")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The value of ",(0,l.kt)("inlineCode",{parentName:"td"},"_tokenId"))))),(0,l.kt)("h3",{id:"slotof-3"},"slotOf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function slotOf(uint256 _tokenId) external view returns (uint256)\n")),(0,l.kt)("p",null,"Get the slot of a token."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The identifier for a token")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The slot of the token")))),(0,l.kt)("h3",{id:"approve-3"},"approve"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function approve(uint256 _tokenId, address _operator, uint256 _value) external payable\n")),(0,l.kt)("p",null,"Allow an operator to manage the value of a token, up to the ",(0,l.kt)("inlineCode",{parentName:"p"},"_value"),"."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"MUST revert unless caller is the current owner, an authorized operator, or the approved\naddress for ",(0,l.kt)("inlineCode",{parentName:"em"},"_tokenId"),".\nMUST emit the ApprovalValue event.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token to approve")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","operator"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The operator to be approved")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","value"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum value of ",(0,l.kt)("inlineCode",{parentName:"td"},"_toTokenId")," that ",(0,l.kt)("inlineCode",{parentName:"td"},"_operator")," is allowed to manage")))),(0,l.kt)("h3",{id:"allowance-3"},"allowance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function allowance(uint256 _tokenId, address _operator) external view returns (uint256)\n")),(0,l.kt)("p",null,"Get the maximum value of a token that an operator is allowed to manage."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token for which to query the allowance")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","operator"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The address of an operator")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The current approval value of ",(0,l.kt)("inlineCode",{parentName:"td"},"_tokenId")," that ",(0,l.kt)("inlineCode",{parentName:"td"},"_operator")," is allowed to manage")))),(0,l.kt)("h3",{id:"transferfrom-6"},"transferFrom"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function transferFrom(uint256 _fromTokenId, uint256 _toTokenId, uint256 _value) external payable\n")),(0,l.kt)("p",null,"Transfer value from a specified token to another specified token with the same slot."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Caller MUST be the current owner, an authorized operator or an operator who has been\napproved the whole ",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," or part of it.\nMUST revert if ",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," or ",(0,l.kt)("inlineCode",{parentName:"em"},"_toTokenId")," is zero token id or does not exist.\nMUST revert if slots of ",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," and ",(0,l.kt)("inlineCode",{parentName:"em"},"_toTokenId")," do not match.\nMUST revert if ",(0,l.kt)("inlineCode",{parentName:"em"},"_value")," exceeds the balance of ",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," or its allowance to the\noperator.\nMUST emit ",(0,l.kt)("inlineCode",{parentName:"em"},"TransferValue")," event.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","fromTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token to transfer value from")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","toTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token to transfer value to")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","value"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The transferred value")))),(0,l.kt)("h3",{id:"transferfrom-7"},"transferFrom"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function transferFrom(uint256 _fromTokenId, address _to, uint256 _value) external payable returns (uint256)\n")),(0,l.kt)("p",null,"Transfer value from a specified token to an address. The caller should confirm that\n",(0,l.kt)("inlineCode",{parentName:"p"},"_to")," is capable of receiving EIP-3525 tokens."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"This function MUST create a new EIP-3525 token with the same slot for ",(0,l.kt)("inlineCode",{parentName:"em"},"_to"),",\nor find an existing token with the same slot owned by ",(0,l.kt)("inlineCode",{parentName:"em"},"_to"),", to receive the transferred value.\nMUST revert if ",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," is zero token id or does not exist.\nMUST revert if ",(0,l.kt)("inlineCode",{parentName:"em"},"_to")," is zero address.\nMUST revert if ",(0,l.kt)("inlineCode",{parentName:"em"},"_value")," exceeds the balance of ",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," or its allowance to the\noperator.\nMUST emit ",(0,l.kt)("inlineCode",{parentName:"em"},"Transfer")," and ",(0,l.kt)("inlineCode",{parentName:"em"},"TransferValue")," events.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","fromTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token to transfer value from")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","to"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The address to transfer value to")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","value"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The transferred value")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"ID of the token which receives the transferred value")))),(0,l.kt)("h2",{id:"erc3525upgradeable-2"},"ERC3525Upgradeable"),(0,l.kt)("h3",{id:"approvedata-2"},"ApproveData"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"struct ApproveData {\n  address[] approvals;\n  mapping(address => uint256) allowances;\n}\n\n")),(0,l.kt)("h3",{id:"_values-2"},"_","values"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(uint256 => uint256) _values\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"tokenId => values")),(0,l.kt)("h3",{id:"_approvedvalues-2"},"_","approvedValues"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(uint256 => struct ERC3525Upgradeable.ApproveData) _approvedValues\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"tokenId => operator => units")),(0,l.kt)("h3",{id:"_slots-2"},"_","slots"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(uint256 => uint256) _slots\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"tokenId => slot")),(0,l.kt)("h3",{id:"_name-2"},"_","name"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"string _name\n")),(0,l.kt)("h3",{id:"_symbol-2"},"_","symbol"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"string _symbol\n")),(0,l.kt)("h3",{id:"_decimals-2"},"_","decimals"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"uint8 _decimals\n")),(0,l.kt)("h3",{id:"initialize-3"},"initialize"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function initialize() public virtual\n")),(0,l.kt)("p",null,"Contract initialization logic"),(0,l.kt)("h3",{id:"supportsinterface-3"},"supportsInterface"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function supportsInterface(bytes4 interfaceId) public view virtual returns (bool)\n")),(0,l.kt)("h3",{id:"valuedecimals-4"},"valueDecimals"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function valueDecimals() public view virtual returns (uint8)\n")),(0,l.kt)("p",null,"Get the number of decimals the token uses for value - e.g. 6, means the user\nrepresentation of the value of a token can be calculated by dividing it by 1,000,000.\nConsidering the compatibility with third-party wallets, this function is defined as\n",(0,l.kt)("inlineCode",{parentName:"p"},"valueDecimals()")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"decimals()")," to avoid conflict with EIP-20 tokens."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of decimals for value")))),(0,l.kt)("h3",{id:"balanceof-4"},"balanceOf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function balanceOf(uint256 tokenId_) public view virtual returns (uint256)\n")),(0,l.kt)("h3",{id:"slotof-4"},"slotOf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function slotOf(uint256 tokenId_) public view virtual returns (uint256)\n")),(0,l.kt)("h3",{id:"contracturi-4"},"contractURI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function contractURI() public view virtual returns (string)\n")),(0,l.kt)("p",null,"Returns the Uniform Resource Identifier (URI) for the current ERC3525 contract."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"This function SHOULD return the URI for this contract in JSON format, starting with\nheader ",(0,l.kt)("inlineCode",{parentName:"em"},"data:application/json;"),".\nSee ",(0,l.kt)("a",{parentName:"em",href:"https://eips.ethereum.org/EIPS/eip-3525"},"https://eips.ethereum.org/EIPS/eip-3525")," for the JSON schema for contract URI.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The JSON formatted URI of the current ERC3525 contract")))),(0,l.kt)("h3",{id:"sloturi-4"},"slotURI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function slotURI(uint256 slot_) public view virtual returns (string)\n")),(0,l.kt)("h3",{id:"approve-4"},"approve"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function approve(uint256 tokenId_, address to_, uint256 value_) external payable virtual\n")),(0,l.kt)("h3",{id:"allowance-4"},"allowance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function allowance(uint256 tokenId_, address operator_) public view virtual returns (uint256)\n")),(0,l.kt)("h3",{id:"tokenuri-2"},"tokenURI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function tokenURI(uint256 tokenId) public view virtual returns (string)\n")),(0,l.kt)("p",null,"Auto-generated by ",(0,l.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/4.x/wizard"},"https://docs.openzeppelin.com/contracts/4.x/wizard")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Selects which base implementation to call")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the token")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the token")))),(0,l.kt)("h3",{id:"transferfrom-8"},"transferFrom"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function transferFrom(uint256 fromTokenId_, address to_, uint256 value_) public payable virtual returns (uint256)\n")),(0,l.kt)("h3",{id:"transferfrom-9"},"transferFrom"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function transferFrom(uint256 fromTokenId_, uint256 toTokenId_, uint256 value_) public payable virtual\n")),(0,l.kt)("h3",{id:"_mint-2"},"_","mint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _mint(address to_, uint256 tokenId_, uint256 slot_) private\n")),(0,l.kt)("h3",{id:"_mintvalue-2"},"_","mintValue"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _mintValue(address to_, uint256 tokenId_, uint256 slot_, uint256 value_) internal virtual\n")),(0,l.kt)("h3",{id:"_burn-2"},"_","burn"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _burn(uint256 tokenId_) internal virtual\n")),(0,l.kt)("h3",{id:"_transfer-2"},"_","transfer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _transfer(uint256 fromTokenId_, uint256 toTokenId_, uint256 value_) internal virtual\n")),(0,l.kt)("h3",{id:"_spendallowance-2"},"_","spendAllowance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _spendAllowance(address operator_, uint256 tokenId_, uint256 value_) internal virtual\n")),(0,l.kt)("h3",{id:"_approvevalue-2"},"_","approveValue"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _approveValue(uint256 tokenId_, address to_, uint256 value_) internal virtual\n")),(0,l.kt)("h3",{id:"_getnewtokenid-2"},"_","getNewTokenId"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _getNewTokenId(uint256) internal virtual returns (uint256)\n")),(0,l.kt)("h3",{id:"_beforetokentransfer-2"},"_","beforeTokenTransfer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _beforeTokenTransfer(address, address, uint256 tokenId) internal virtual\n")),(0,l.kt)("h3",{id:"_aftertokentransfer-2"},"_","afterTokenTransfer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _afterTokenTransfer(address from, address to, uint256 tokenId) internal virtual\n")),(0,l.kt)("p",null,"_","Hook that is called after any transfer of tokens. This includes\nminting and burning."),(0,l.kt)("p",null,"Calling conditions:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"when ",(0,l.kt)("inlineCode",{parentName:"li"},"from")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"to")," are both non-zero."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"from")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"to")," are never both zero.")),(0,l.kt)("p",null,"To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks","[Using Hooks]",".","_"),(0,l.kt)("h3",{id:"_checkonerc3525received-2"},"_","checkOnERC3525Received"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _checkOnERC3525Received(uint256 fromTokenId_, uint256 toTokenId_, uint256 value_, bytes data_) private returns (bool)\n")),(0,l.kt)("h3",{id:"_beforevaluetransfer-2"},"_","beforeValueTransfer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _beforeValueTransfer(address from_, address to_, uint256 fromTokenId_, uint256 toTokenId_, uint256 slot_, uint256 value_) internal virtual\n")),(0,l.kt)("h3",{id:"_aftervaluetransfer-2"},"_","afterValueTransfer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _afterValueTransfer(address from_, address to_, uint256 fromTokenId_, uint256 toTokenId_, uint256 slot_, uint256 value_) internal virtual\n")),(0,l.kt)("h2",{id:"hypercertminterv0-1"},"HypercertMinterV0"),(0,l.kt)("p",null,"Contains functions and events to initialize and issue a hypercertificate"),(0,l.kt)("h3",{id:"name-1"},"NAME"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"string NAME\n")),(0,l.kt)("p",null,"Contract name"),(0,l.kt)("h3",{id:"upgrader_role-1"},"UPGRADER_ROLE"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes32 UPGRADER_ROLE\n")),(0,l.kt)("p",null,"User role required in order to upgrade the contract"),(0,l.kt)("h3",{id:"default_units-1"},"DEFAULT_UNITS"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"uint256 DEFAULT_UNITS\n")),(0,l.kt)("p",null,"@notice"),(0,l.kt)("h3",{id:"_version-1"},"_","version"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"uint16 _version\n")),(0,l.kt)("p",null,"Current version of the contract"),(0,l.kt)("h3",{id:"_counter-1"},"_","counter"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"uint256 _counter\n")),(0,l.kt)("p",null,"Counter incremented to form the hypercertificate ID"),(0,l.kt)("h3",{id:"workscopes-1"},"workScopes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(bytes32 => string) workScopes\n")),(0,l.kt)("p",null,"Mapping of id's to work-scopes"),(0,l.kt)("h3",{id:"impactscopes-1"},"impactScopes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(bytes32 => string) impactScopes\n")),(0,l.kt)("p",null,"Mapping of id's to impact-scopes"),(0,l.kt)("h3",{id:"rights-1"},"rights"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(bytes32 => string) rights\n")),(0,l.kt)("p",null,"Mapping of id's to rights"),(0,l.kt)("h3",{id:"_contributorimpacts-1"},"_","contributorImpacts"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(address => mapping(bytes32 => bool)) _contributorImpacts\n")),(0,l.kt)("h3",{id:"_impactcerts-1"},"_","impactCerts"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(uint256 => struct HypercertMinterV0.Claim) _impactCerts\n")),(0,l.kt)("h3",{id:"claim-1"},"Claim"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"struct Claim {\n  bytes32 claimHash;\n  uint64[2] workTimeframe;\n  uint64[2] impactTimeframe;\n  bytes32[] workScopes;\n  bytes32[] impactScopes;\n  bytes32[] rights;\n  address[] contributors;\n  uint16 version;\n  bool exists;\n}\n\n")),(0,l.kt)("h3",{id:"impactclaimed-1"},"ImpactClaimed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ImpactClaimed(uint256 id, address minter, bytes32 claimHash, address[] contributors, uint64[2] workTimeframe, uint64[2] impactTimeframe, bytes32[] workScopes, bytes32[] impactScopes, bytes32[] rights, uint64 version, string uri)\n")),(0,l.kt)("p",null,"Emitted when an impact is claimed."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the claimed impact.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"minter"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"Address of cert minter.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claimHash"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Hash value of the claim data.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"contributors"),(0,l.kt)("td",{parentName:"tr",align:null},"address[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Contributors to the claimed impact.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"workTimeframe"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64","[2]"),(0,l.kt)("td",{parentName:"tr",align:null},"To/from date of the work related to the claim.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"impactTimeframe"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64","[2]"),(0,l.kt)("td",{parentName:"tr",align:null},"To/from date of the claimed impact.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"workScopes"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Id's relating to the scope of the work.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"impactScopes"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Id's relating to the scope of the impact.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rights"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Id's relating to the rights applied to the hypercert.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"version"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64"),(0,l.kt)("td",{parentName:"tr",align:null},"Version of the hypercert.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uri"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the metadata of the hypercert.")))),(0,l.kt)("h3",{id:"impactscopeadded-1"},"ImpactScopeAdded"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ImpactScopeAdded(bytes32 id, string text)\n")),(0,l.kt)("p",null,"Emitted when a new impact scope is added."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the impact scope.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Short text code of the impact scope.")))),(0,l.kt)("h3",{id:"rightadded-1"},"RightAdded"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event RightAdded(bytes32 id, string text)\n")),(0,l.kt)("p",null,"Emitted when a new right is added."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the right.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Short text code of the right.")))),(0,l.kt)("h3",{id:"workscopeadded-1"},"WorkScopeAdded"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event WorkScopeAdded(bytes32 id, string text)\n")),(0,l.kt)("p",null,"Emitted when a new work scope is added."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the work scope.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Short text code of the work scope.")))),(0,l.kt)("h3",{id:"constructor-1"},"constructor"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"constructor() public\n")),(0,l.kt)("p",null,"Contract constructor logic"),(0,l.kt)("h3",{id:"initialize-4"},"initialize"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function initialize() public\n")),(0,l.kt)("p",null,"Contract initialization logic"),(0,l.kt)("h3",{id:"addimpactscope-1"},"addImpactScope"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function addImpactScope(string text) public returns (bytes32 id)\n")),(0,l.kt)("p",null,"Adds a new impact scope"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Text representing the impact scope")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the impact scope")))),(0,l.kt)("h3",{id:"addright-1"},"addRight"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function addRight(string text) public returns (bytes32 id)\n")),(0,l.kt)("p",null,"Adds a new right"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Text representing the right")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the right")))),(0,l.kt)("h3",{id:"addworkscope-1"},"addWorkScope"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function addWorkScope(string text) public returns (bytes32 id)\n")),(0,l.kt)("p",null,"Adds a new work scope"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Text representing the work scope")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the work scope")))),(0,l.kt)("h3",{id:"mint-1"},"mint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function mint(address account, bytes data) public virtual\n")),(0,l.kt)("p",null,"Issues a new hypercertificate"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"account"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"Account issuing the new hypercertificate")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"Data representing the parameters of the claim")))),(0,l.kt)("h3",{id:"getimpactcert-1"},"getImpactCert"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function getImpactCert(uint256 claimID) public view returns (struct HypercertMinterV0.Claim)\n")),(0,l.kt)("p",null,"Gets the impact claim with the specified id"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claimID"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the claim")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"struct HypercertMinterV0.Claim"),(0,l.kt)("td",{parentName:"tr",align:null},"The claim, if it doesn't exist with default values")))),(0,l.kt)("h3",{id:"version-1"},"version"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function version() public view virtual returns (uint256)\n")),(0,l.kt)("p",null,"gets the current version of the contract"),(0,l.kt)("h3",{id:"updateversion-1"},"updateVersion"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function updateVersion() external\n")),(0,l.kt)("p",null,"Update the contract version number\nOnly allowed for member of UPGRADER_ROLE"),(0,l.kt)("h3",{id:"supportsinterface-4"},"supportsInterface"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function supportsInterface(bytes4 interfaceId) public view returns (bool)\n")),(0,l.kt)("p",null,"Returns a flag indicating if the contract supports the specified interface"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"interfaceId"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes4"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the interface")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"true, if the interface is supported")))),(0,l.kt)("h3",{id:"_authorizeupgrade-1"},"_","authorizeUpgrade"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _authorizeUpgrade(address) internal view\n")),(0,l.kt)("p",null,"upgrade authorization logic"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"adds onlyRole(UPGRADER_ROLE) requirement")),(0,l.kt)("h3",{id:"_authorizeadd-1"},"_","authorizeAdd"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _authorizeAdd(string text, mapping(bytes32 => string) map) internal view virtual returns (bytes32 id)\n")),(0,l.kt)("p",null,"Pre-add validation checks"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Text to be added")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"map"),(0,l.kt)("td",{parentName:"tr",align:null},"mapping(bytes32 ","=",">"," string)"),(0,l.kt)("td",{parentName:"tr",align:null},"Storage mapping that will be appended")))),(0,l.kt)("h3",{id:"_authorizemint-1"},"_","authorizeMint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _authorizeMint(address account, struct HypercertMinterV0.Claim claim) internal view virtual\n")),(0,l.kt)("p",null,"Pre-mint validation checks"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"account"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"Destination address for the mint")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claim"),(0,l.kt)("td",{parentName:"tr",align:null},"struct HypercertMinterV0.Claim"),(0,l.kt)("td",{parentName:"tr",align:null},"Impact claim data")))),(0,l.kt)("h3",{id:"_parsedata-1"},"_","parseData"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _parseData(bytes data) internal pure virtual returns (struct HypercertMinterV0.Claim claim, string)\n")),(0,l.kt)("p",null,"Parse bytes to Claim and URI"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"This function is overridable in order to support future schema changes")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"Byte data representing the claim")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claim"),(0,l.kt)("td",{parentName:"tr",align:null},"struct HypercertMinterV0.Claim"),(0,l.kt)("td",{parentName:"tr",align:null},"The parsed Claim struct")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[1]"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Claim metadata URI")))),(0,l.kt)("h3",{id:"_storecontributorsclaims-1"},"_","storeContributorsClaims"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _storeContributorsClaims(bytes32 claimHash, address[] creators) internal\n")),(0,l.kt)("p",null,"Stores contributor claims in the ",(0,l.kt)("inlineCode",{parentName:"p"},"contributorImpacts")," mapping; guards against overlapping claims"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claimHash"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Claim data hash-code value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"creators"),(0,l.kt)("td",{parentName:"tr",align:null},"address[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Array of addresses for contributors")))),(0,l.kt)("h3",{id:"_hash-1"},"_","hash"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _hash(string value) internal pure returns (bytes32)\n")),(0,l.kt)("p",null,"Hash the specified string value"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"string to hash")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"a keccak256 hash-code")))),(0,l.kt)("h3",{id:"_haskey-1"},"_","hasKey"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _hasKey(mapping(bytes32 => string) map, bytes32 key) internal view returns (bool)\n")),(0,l.kt)("p",null,"Checks whether the supplied mapping contains the supplied key"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"map"),(0,l.kt)("td",{parentName:"tr",align:null},"mapping(bytes32 ","=",">"," string)"),(0,l.kt)("td",{parentName:"tr",align:null},"mapping to search")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"key"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"key to search")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"true, if the key exists in the mapping")))),(0,l.kt)("h2",{id:"ierc3525metadataupgradeable-2"},"IERC3525MetadataUpgradeable"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Interfaces for any contract that wants to support query of the Uniform Resource Identifier\n(URI) for the ERC3525 contract as well as a specified slot.\nBecause of the higher reliability of data stored in smart contracts compared to data stored in\ncentralized systems, it is recommended that metadata, including ",(0,l.kt)("inlineCode",{parentName:"em"},"contractURI"),", ",(0,l.kt)("inlineCode",{parentName:"em"},"slotURI")," and\n",(0,l.kt)("inlineCode",{parentName:"em"},"tokenURI"),", be directly returned in JSON format, instead of being returned with a url pointing\nto any resource stored in a centralized system.\nSee ",(0,l.kt)("a",{parentName:"em",href:"https://eips.ethereum.org/EIPS/eip-3525"},"https://eips.ethereum.org/EIPS/eip-3525"),"\nNote: the ERC-165 identifier for this interface is 0xe1600902.")),(0,l.kt)("h3",{id:"contracturi-5"},"contractURI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function contractURI() external view returns (string)\n")),(0,l.kt)("p",null,"Returns the Uniform Resource Identifier (URI) for the current ERC3525 contract."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"This function SHOULD return the URI for this contract in JSON format, starting with\nheader ",(0,l.kt)("inlineCode",{parentName:"em"},"data:application/json;"),".\nSee ",(0,l.kt)("a",{parentName:"em",href:"https://eips.ethereum.org/EIPS/eip-3525"},"https://eips.ethereum.org/EIPS/eip-3525")," for the JSON schema for contract URI.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The JSON formatted URI of the current ERC3525 contract")))),(0,l.kt)("h3",{id:"sloturi-5"},"slotURI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function slotURI(uint256 _slot) external view returns (string)\n")),(0,l.kt)("p",null,"Returns the Uniform Resource Identifier (URI) for the specified slot."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"This function SHOULD return the URI for ",(0,l.kt)("inlineCode",{parentName:"em"},"_slot")," in JSON format, starting with header\n",(0,l.kt)("inlineCode",{parentName:"em"},"data:application/json;"),".\nSee ",(0,l.kt)("a",{parentName:"em",href:"https://eips.ethereum.org/EIPS/eip-3525"},"https://eips.ethereum.org/EIPS/eip-3525")," for the JSON schema for slot URI.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The JSON formatted URI of ",(0,l.kt)("inlineCode",{parentName:"td"},"_slot"))))),(0,l.kt)("h2",{id:"ierc3525receiver-2"},"IERC3525Receiver"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Interface for any contract that wants to be informed by EIP-3525 contracts when receiving values from other\naddresses.\nNote: the EIP-165 identifier for this interface is 0x009ce20b.")),(0,l.kt)("h3",{id:"onerc3525received-2"},"onERC3525Received"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function onERC3525Received(address _operator, uint256 _fromTokenId, uint256 _toTokenId, uint256 _value, bytes _data) external returns (bytes4)\n")),(0,l.kt)("p",null,"Handle the receipt of an EIP-3525 token value."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"An EIP-3525 smart contract MUST check whether this function is implemented by the recipient contract, if the\nrecipient contract implements this function, the EIP-3525 contract MUST call this function after a\nvalue transfer (i.e. ",(0,l.kt)("inlineCode",{parentName:"em"},"transferFrom(uint256,uint256,uint256,bytes)"),").\nMUST return 0x009ce20b (i.e. ",(0,l.kt)("inlineCode",{parentName:"em"},"bytes4(keccak256('onERC3525Received(address,uint256,uint256, uint256,bytes)'))"),") if the transfer is accepted.\nMUST revert or return any value other than 0x009ce20b if the transfer is rejected.\nThe EIP-3525 smart contract that calls this function MUST revert the transfer transaction if the return value\nis not equal to 0x009ce20b.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","operator"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The address which triggered the transfer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","fromTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token id to transfer value from")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","toTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token id to transfer value to")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","value"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The transferred value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"Additional data with no specified format")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes4"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bytes4(keccak256('onERC3525Received(address,uint256,uint256,uint256,bytes)'))")," unless the transfer is rejected.")))),(0,l.kt)("h2",{id:"ierc3525slotapprovableupgradeable"},"IERC3525SlotApprovableUpgradeable"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Interfaces for any contract that wants to support approval of slot level, which allows an\noperator to manage one's tokens with the same slot.\nSee ",(0,l.kt)("a",{parentName:"em",href:"https://eips.ethereum.org/EIPS/eip-3525"},"https://eips.ethereum.org/EIPS/eip-3525"),"\nNote: the EIP-165 identifier for this interface is 0xb688be58.")),(0,l.kt)("h3",{id:"approvalforslot"},"ApprovalForSlot"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ApprovalForSlot(address _owner, uint256 _slot, address _operator, bool _approved)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"MUST emit when an operator is approved or disapproved to manage all of ",(0,l.kt)("inlineCode",{parentName:"em"},"_owner"),"'s\ntokens with the same slot.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","owner"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The address whose tokens are approved")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","slot"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The slot to approve, all of ",(0,l.kt)("inlineCode",{parentName:"td"},"_owner"),"'s tokens with this slot are approved")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","operator"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The operator being approved or disapproved")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","approved"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"Identify if ",(0,l.kt)("inlineCode",{parentName:"td"},"_operator")," is approved or disapproved")))),(0,l.kt)("h3",{id:"setapprovalforslot"},"setApprovalForSlot"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function setApprovalForSlot(address _owner, uint256 _slot, address _operator, bool _approved) external payable\n")),(0,l.kt)("p",null,"Approve or disapprove an operator to manage all of ",(0,l.kt)("inlineCode",{parentName:"p"},"_owner"),"'s tokens with the\nspecified slot."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Caller SHOULD be ",(0,l.kt)("inlineCode",{parentName:"em"},"_owner")," or an operator who has been authorized through\n",(0,l.kt)("inlineCode",{parentName:"em"},"setApprovalForAll"),".\nMUST emit ApprovalSlot event.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","owner"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The address that owns the EIP-3525 tokens")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","slot"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The slot of tokens being queried approval of")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","operator"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The address for whom to query approval")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","approved"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"Identify if ",(0,l.kt)("inlineCode",{parentName:"td"},"_operator")," would be approved or disapproved")))),(0,l.kt)("h3",{id:"isapprovedforslot"},"isApprovedForSlot"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function isApprovedForSlot(address _owner, uint256 _slot, address _operator) external view returns (bool)\n")),(0,l.kt)("p",null,"Query if ",(0,l.kt)("inlineCode",{parentName:"p"},"_operator")," is authorized to manage all of ",(0,l.kt)("inlineCode",{parentName:"p"},"_owner"),"'s tokens with the\nspecified slot."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","owner"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The address that owns the EIP-3525 tokens")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","slot"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The slot of tokens being queried approval of")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","operator"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The address for whom to query approval")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"True if ",(0,l.kt)("inlineCode",{parentName:"td"},"_operator")," is authorized to manage all of ",(0,l.kt)("inlineCode",{parentName:"td"},"_owner"),"'s tokens with ",(0,l.kt)("inlineCode",{parentName:"td"},"_slot"),", false otherwise.")))),(0,l.kt)("h2",{id:"ierc3525slotenumerableupgradeable"},"IERC3525SlotEnumerableUpgradeable"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Interfaces for any contract that wants to support enumeration of slots as well as tokens\nwith the same slot.\nNote: the EIP-165 identifier for this interface is 0x3b741b9e.")),(0,l.kt)("h3",{id:"slotcount"},"slotCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function slotCount() external view returns (uint256)\n")),(0,l.kt)("p",null,"Get the total amount of slots stored by the contract."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The total amount of slots")))),(0,l.kt)("h3",{id:"slotbyindex"},"slotByIndex"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function slotByIndex(uint256 _index) external view returns (uint256)\n")),(0,l.kt)("p",null,"Get the slot at the specified index of all slots stored by the contract."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","index"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The index in the slot list")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The slot at ",(0,l.kt)("inlineCode",{parentName:"td"},"index")," of all slots.")))),(0,l.kt)("h3",{id:"tokensupplyinslot"},"tokenSupplyInSlot"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function tokenSupplyInSlot(uint256 _slot) external view returns (uint256)\n")),(0,l.kt)("p",null,"Get the total amount of tokens with the same slot."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","slot"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The slot to query token supply for")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The total amount of tokens with the specified ",(0,l.kt)("inlineCode",{parentName:"td"},"_slot"))))),(0,l.kt)("h3",{id:"tokeninslotbyindex"},"tokenInSlotByIndex"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function tokenInSlotByIndex(uint256 _slot, uint256 _index) external view returns (uint256)\n")),(0,l.kt)("p",null,"Get the token at the specified index of all tokens with the same slot."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","slot"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The slot to query tokens with")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","index"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The index in the token list of the slot")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token ID at ",(0,l.kt)("inlineCode",{parentName:"td"},"_index")," of all tokens with ",(0,l.kt)("inlineCode",{parentName:"td"},"_slot"))))),(0,l.kt)("h2",{id:"ierc3525upgradeable-2"},"IERC3525Upgradeable"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"See ",(0,l.kt)("a",{parentName:"em",href:"https://eips.ethereum.org/EIPS/eip-3525"},"https://eips.ethereum.org/EIPS/eip-3525"))),(0,l.kt)("h3",{id:"transfervalue-2"},"TransferValue"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event TransferValue(uint256 _fromTokenId, uint256 _toTokenId, uint256 _value)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"MUST emit when value of a token is transferred to another token with the same slot,\nincluding zero value transfers (","_","value == 0) as well as transfers when tokens are created\n(",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," == 0) or destroyed (",(0,l.kt)("inlineCode",{parentName:"em"},"_toTokenId")," == 0).")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","fromTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token id to transfer value from")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","toTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token id to transfer value to")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","value"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The transferred value")))),(0,l.kt)("h3",{id:"approvalvalue-2"},"ApprovalValue"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ApprovalValue(uint256 _tokenId, address _operator, uint256 _value)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"MUST emit when the approval value of a token is set or changed.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token to approve")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","operator"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The operator to approve for")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","value"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum value that ",(0,l.kt)("inlineCode",{parentName:"td"},"_operator")," is allowed to manage")))),(0,l.kt)("h3",{id:"slotchanged-2"},"SlotChanged"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event SlotChanged(uint256 _tokenId, uint256 _oldSlot, uint256 _newSlot)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"MUST emit when the slot of a token is set or changed.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token of which slot is set or changed")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","oldSlot"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The previous slot of the token")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","newSlot"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The updated slot of the token")))),(0,l.kt)("h3",{id:"valuedecimals-5"},"valueDecimals"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function valueDecimals() external view returns (uint8)\n")),(0,l.kt)("p",null,"Get the number of decimals the token uses for value - e.g. 6, means the user\nrepresentation of the value of a token can be calculated by dividing it by 1,000,000.\nConsidering the compatibility with third-party wallets, this function is defined as\n",(0,l.kt)("inlineCode",{parentName:"p"},"valueDecimals()")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"decimals()")," to avoid conflict with EIP-20 tokens."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of decimals for value")))),(0,l.kt)("h3",{id:"balanceof-5"},"balanceOf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function balanceOf(uint256 _tokenId) external view returns (uint256)\n")),(0,l.kt)("p",null,"Get the value of a token."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token for which to query the balance")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The value of ",(0,l.kt)("inlineCode",{parentName:"td"},"_tokenId"))))),(0,l.kt)("h3",{id:"slotof-5"},"slotOf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function slotOf(uint256 _tokenId) external view returns (uint256)\n")),(0,l.kt)("p",null,"Get the slot of a token."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The identifier for a token")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The slot of the token")))),(0,l.kt)("h3",{id:"approve-5"},"approve"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function approve(uint256 _tokenId, address _operator, uint256 _value) external payable\n")),(0,l.kt)("p",null,"Allow an operator to manage the value of a token, up to the ",(0,l.kt)("inlineCode",{parentName:"p"},"_value"),"."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"MUST revert unless caller is the current owner, an authorized operator, or the approved\naddress for ",(0,l.kt)("inlineCode",{parentName:"em"},"_tokenId"),".\nMUST emit the ApprovalValue event.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token to approve")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","operator"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The operator to be approved")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","value"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum value of ",(0,l.kt)("inlineCode",{parentName:"td"},"_toTokenId")," that ",(0,l.kt)("inlineCode",{parentName:"td"},"_operator")," is allowed to manage")))),(0,l.kt)("h3",{id:"allowance-5"},"allowance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function allowance(uint256 _tokenId, address _operator) external view returns (uint256)\n")),(0,l.kt)("p",null,"Get the maximum value of a token that an operator is allowed to manage."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token for which to query the allowance")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","operator"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The address of an operator")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The current approval value of ",(0,l.kt)("inlineCode",{parentName:"td"},"_tokenId")," that ",(0,l.kt)("inlineCode",{parentName:"td"},"_operator")," is allowed to manage")))),(0,l.kt)("h3",{id:"transferfrom-10"},"transferFrom"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function transferFrom(uint256 _fromTokenId, uint256 _toTokenId, uint256 _value) external payable\n")),(0,l.kt)("p",null,"Transfer value from a specified token to another specified token with the same slot."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Caller MUST be the current owner, an authorized operator or an operator who has been\napproved the whole ",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," or part of it.\nMUST revert if ",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," or ",(0,l.kt)("inlineCode",{parentName:"em"},"_toTokenId")," is zero token id or does not exist.\nMUST revert if slots of ",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," and ",(0,l.kt)("inlineCode",{parentName:"em"},"_toTokenId")," do not match.\nMUST revert if ",(0,l.kt)("inlineCode",{parentName:"em"},"_value")," exceeds the balance of ",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," or its allowance to the\noperator.\nMUST emit ",(0,l.kt)("inlineCode",{parentName:"em"},"TransferValue")," event.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","fromTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token to transfer value from")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","toTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token to transfer value to")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","value"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The transferred value")))),(0,l.kt)("h3",{id:"transferfrom-11"},"transferFrom"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function transferFrom(uint256 _fromTokenId, address _to, uint256 _value) external payable returns (uint256)\n")),(0,l.kt)("p",null,"Transfer value from a specified token to an address. The caller should confirm that\n",(0,l.kt)("inlineCode",{parentName:"p"},"_to")," is capable of receiving EIP-3525 tokens."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"This function MUST create a new EIP-3525 token with the same slot for ",(0,l.kt)("inlineCode",{parentName:"em"},"_to"),",\nor find an existing token with the same slot owned by ",(0,l.kt)("inlineCode",{parentName:"em"},"_to"),", to receive the transferred value.\nMUST revert if ",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," is zero token id or does not exist.\nMUST revert if ",(0,l.kt)("inlineCode",{parentName:"em"},"_to")," is zero address.\nMUST revert if ",(0,l.kt)("inlineCode",{parentName:"em"},"_value")," exceeds the balance of ",(0,l.kt)("inlineCode",{parentName:"em"},"_fromTokenId")," or its allowance to the\noperator.\nMUST emit ",(0,l.kt)("inlineCode",{parentName:"em"},"Transfer")," and ",(0,l.kt)("inlineCode",{parentName:"em"},"TransferValue")," events.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","fromTokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The token to transfer value from")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","to"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The address to transfer value to")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"_","value"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The transferred value")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"ID of the token which receives the transferred value")))),(0,l.kt)("h2",{id:"hypercertminterv0-2"},"HypercertMinterV0"),(0,l.kt)("p",null,"Contains functions and events to initialize and issue a hypercertificate"),(0,l.kt)("h3",{id:"name-2"},"NAME"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"string NAME\n")),(0,l.kt)("p",null,"Contract name"),(0,l.kt)("h3",{id:"upgrader_role-2"},"UPGRADER_ROLE"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes32 UPGRADER_ROLE\n")),(0,l.kt)("p",null,"User role required in order to upgrade the contract"),(0,l.kt)("h3",{id:"_version-2"},"_","version"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"uint16 _version\n")),(0,l.kt)("p",null,"Current version of the contract"),(0,l.kt)("h3",{id:"_counter-2"},"_","counter"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"uint256 _counter\n")),(0,l.kt)("p",null,"Counter incremented to form the hypercertificate ID"),(0,l.kt)("h3",{id:"workscopes-2"},"workScopes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(bytes32 => string) workScopes\n")),(0,l.kt)("p",null,"Mapping of id's to work-scopes"),(0,l.kt)("h3",{id:"impactscopes-2"},"impactScopes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(bytes32 => string) impactScopes\n")),(0,l.kt)("p",null,"Mapping of id's to impact-scopes"),(0,l.kt)("h3",{id:"rights-2"},"rights"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(bytes32 => string) rights\n")),(0,l.kt)("p",null,"Mapping of id's to rights"),(0,l.kt)("h3",{id:"_contributorimpacts-2"},"_","contributorImpacts"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(address => mapping(bytes32 => bool)) _contributorImpacts\n")),(0,l.kt)("h3",{id:"_impactcerts-2"},"_","impactCerts"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(uint256 => struct HypercertMinterV0.Claim) _impactCerts\n")),(0,l.kt)("h3",{id:"claim-2"},"Claim"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"struct Claim {\n  bytes32 claimHash;\n  uint64[2] workTimeframe;\n  uint64[2] impactTimeframe;\n  bytes32[] workScopes;\n  bytes32[] impactScopes;\n  bytes32[] rights;\n  address[] contributors;\n  uint16 version;\n  bool exists;\n}\n\n")),(0,l.kt)("h3",{id:"impactclaimed-2"},"ImpactClaimed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ImpactClaimed(uint256 id, address minter, bytes32 claimHash, address[] contributors, uint64[2] workTimeframe, uint64[2] impactTimeframe, bytes32[] workScopes, bytes32[] impactScopes, bytes32[] rights, uint64 version, string uri)\n")),(0,l.kt)("p",null,"Emitted when an impact is claimed."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the claimed impact.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"minter"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"Address of cert minter.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claimHash"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Hash value of the claim data.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"contributors"),(0,l.kt)("td",{parentName:"tr",align:null},"address[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Contributors to the claimed impact.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"workTimeframe"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64","[2]"),(0,l.kt)("td",{parentName:"tr",align:null},"To/from date of the work related to the claim.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"impactTimeframe"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64","[2]"),(0,l.kt)("td",{parentName:"tr",align:null},"To/from date of the claimed impact.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"workScopes"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Id's relating to the scope of the work.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"impactScopes"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Id's relating to the scope of the impact.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rights"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Id's relating to the rights applied to the hypercert.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"version"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64"),(0,l.kt)("td",{parentName:"tr",align:null},"Version of the hypercert.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uri"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the metadata of the hypercert.")))),(0,l.kt)("h3",{id:"impactscopeadded-2"},"ImpactScopeAdded"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ImpactScopeAdded(bytes32 id, string text)\n")),(0,l.kt)("p",null,"Emitted when a new impact scope is added."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the impact scope.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Short text code of the impact scope.")))),(0,l.kt)("h3",{id:"rightadded-2"},"RightAdded"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event RightAdded(bytes32 id, string text)\n")),(0,l.kt)("p",null,"Emitted when a new right is added."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the right.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Short text code of the right.")))),(0,l.kt)("h3",{id:"workscopeadded-2"},"WorkScopeAdded"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event WorkScopeAdded(bytes32 id, string text)\n")),(0,l.kt)("p",null,"Emitted when a new work scope is added."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the work scope.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Short text code of the work scope.")))),(0,l.kt)("h3",{id:"constructor-2"},"constructor"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"constructor() public\n")),(0,l.kt)("p",null,"Contract constructor logic"),(0,l.kt)("h3",{id:"initialize-5"},"initialize"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function initialize() public\n")),(0,l.kt)("p",null,"Contract initialization logic"),(0,l.kt)("h3",{id:"addimpactscope-2"},"addImpactScope"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function addImpactScope(string text) public returns (bytes32 id)\n")),(0,l.kt)("p",null,"Adds a new impact scope"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Text representing the impact scope")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the impact scope")))),(0,l.kt)("h3",{id:"addright-2"},"addRight"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function addRight(string text) public returns (bytes32 id)\n")),(0,l.kt)("p",null,"Adds a new right"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Text representing the right")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the right")))),(0,l.kt)("h3",{id:"addworkscope-2"},"addWorkScope"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function addWorkScope(string text) public returns (bytes32 id)\n")),(0,l.kt)("p",null,"Adds a new work scope"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Text representing the work scope")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the work scope")))),(0,l.kt)("h3",{id:"mint-2"},"mint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function mint(address account, bytes data) public virtual\n")),(0,l.kt)("p",null,"Issues a new hypercertificate"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"account"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"Account issuing the new hypercertificate")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"Data representing the parameters of the claim")))),(0,l.kt)("h3",{id:"getimpactcert-2"},"getImpactCert"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function getImpactCert(uint256 claimID) public view returns (struct HypercertMinterV0.Claim)\n")),(0,l.kt)("p",null,"Gets the impact claim with the specified id"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claimID"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the claim")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"struct HypercertMinterV0.Claim"),(0,l.kt)("td",{parentName:"tr",align:null},"The claim, if it doesn't exist with default values")))),(0,l.kt)("h3",{id:"tokenuri-3"},"tokenURI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function tokenURI(uint256 tokenId) public view returns (string)\n")),(0,l.kt)("p",null,"Auto-generated by ",(0,l.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/4.x/wizard"},"https://docs.openzeppelin.com/contracts/4.x/wizard")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Selects which base implementation to call")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the token")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the token")))),(0,l.kt)("h3",{id:"version-2"},"version"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function version() public view virtual returns (uint256)\n")),(0,l.kt)("p",null,"gets the current version of the contract"),(0,l.kt)("h3",{id:"updateversion-2"},"updateVersion"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function updateVersion() external\n")),(0,l.kt)("p",null,"Update the contract version number\nOnly allowed for member of UPGRADER_ROLE"),(0,l.kt)("h3",{id:"supportsinterface-5"},"supportsInterface"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function supportsInterface(bytes4 interfaceId) public view returns (bool)\n")),(0,l.kt)("p",null,"Returns a flag indicating if the contract supports the specified interface"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"interfaceId"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes4"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the interface")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"true, if the interface is supported")))),(0,l.kt)("h3",{id:"_authorizeupgrade-2"},"_","authorizeUpgrade"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _authorizeUpgrade(address) internal view\n")),(0,l.kt)("p",null,"upgrade authorization logic"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"adds onlyRole(UPGRADER_ROLE) requirement")),(0,l.kt)("h3",{id:"_authorizeadd-2"},"_","authorizeAdd"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _authorizeAdd(string text, mapping(bytes32 => string) map) internal view virtual returns (bytes32 id)\n")),(0,l.kt)("p",null,"Pre-add validation checks"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Text to be added")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"map"),(0,l.kt)("td",{parentName:"tr",align:null},"mapping(bytes32 ","=",">"," string)"),(0,l.kt)("td",{parentName:"tr",align:null},"Storage mapping that will be appended")))),(0,l.kt)("h3",{id:"_authorizemint-2"},"_","authorizeMint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _authorizeMint(address account, struct HypercertMinterV0.Claim claim) internal view virtual\n")),(0,l.kt)("p",null,"Pre-mint validation checks"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"account"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"Destination address for the mint")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claim"),(0,l.kt)("td",{parentName:"tr",align:null},"struct HypercertMinterV0.Claim"),(0,l.kt)("td",{parentName:"tr",align:null},"Impact claim data")))),(0,l.kt)("h3",{id:"_burn-3"},"_","burn"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _burn(uint256 tokenId) internal\n")),(0,l.kt)("h3",{id:"_parsedata-2"},"_","parseData"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _parseData(bytes data) internal pure virtual returns (struct HypercertMinterV0.Claim claim, string)\n")),(0,l.kt)("p",null,"Parse bytes to Claim and URI"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"This function is overridable in order to support future schema changes")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"Byte data representing the claim")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claim"),(0,l.kt)("td",{parentName:"tr",align:null},"struct HypercertMinterV0.Claim"),(0,l.kt)("td",{parentName:"tr",align:null},"The parsed Claim struct")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[1]"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Claim metadata URI")))),(0,l.kt)("h3",{id:"_storecontributorsclaims-2"},"_","storeContributorsClaims"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _storeContributorsClaims(bytes32 claimHash, address[] creators) internal\n")),(0,l.kt)("p",null,"Stores contributor claims in the ",(0,l.kt)("inlineCode",{parentName:"p"},"contributorImpacts")," mapping; guards against overlapping claims"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claimHash"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Claim data hash-code value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"creators"),(0,l.kt)("td",{parentName:"tr",align:null},"address[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Array of addresses for contributors")))),(0,l.kt)("h3",{id:"_hash-2"},"_","hash"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _hash(string value) internal pure returns (bytes32)\n")),(0,l.kt)("p",null,"Hash the specified string value"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"string to hash")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"a keccak256 hash-code")))),(0,l.kt)("h3",{id:"_haskey-2"},"_","hasKey"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _hasKey(mapping(bytes32 => string) map, bytes32 key) internal view returns (bool)\n")),(0,l.kt)("p",null,"Checks whether the supplied mapping contains the supplied key"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"map"),(0,l.kt)("td",{parentName:"tr",align:null},"mapping(bytes32 ","=",">"," string)"),(0,l.kt)("td",{parentName:"tr",align:null},"mapping to search")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"key"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"key to search")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"true, if the key exists in the mapping")))),(0,l.kt)("h2",{id:"hypercertminterv0-3"},"HypercertMinterV0"),(0,l.kt)("p",null,"Contains functions and events to initialize and issue a hypercertificate"),(0,l.kt)("h3",{id:"name-3"},"NAME"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"string NAME\n")),(0,l.kt)("p",null,"Contract name"),(0,l.kt)("h3",{id:"upgrader_role-3"},"UPGRADER_ROLE"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes32 UPGRADER_ROLE\n")),(0,l.kt)("p",null,"User role required in order to upgrade the contract"),(0,l.kt)("h3",{id:"_version-3"},"_","version"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"uint16 _version\n")),(0,l.kt)("p",null,"Current version of the contract"),(0,l.kt)("h3",{id:"_counter-3"},"_","counter"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"uint256 _counter\n")),(0,l.kt)("p",null,"Counter incremented to form the hypercertificate ID"),(0,l.kt)("h3",{id:"workscopes-3"},"workScopes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(bytes32 => string) workScopes\n")),(0,l.kt)("p",null,"Mapping of id's to work-scopes"),(0,l.kt)("h3",{id:"impactscopes-3"},"impactScopes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(bytes32 => string) impactScopes\n")),(0,l.kt)("p",null,"Mapping of id's to impact-scopes"),(0,l.kt)("h3",{id:"rights-3"},"rights"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(bytes32 => string) rights\n")),(0,l.kt)("p",null,"Mapping of id's to rights"),(0,l.kt)("h3",{id:"_contributorimpacts-3"},"_","contributorImpacts"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(address => mapping(bytes32 => bool)) _contributorImpacts\n")),(0,l.kt)("h3",{id:"_impactcerts-3"},"_","impactCerts"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(uint256 => struct HypercertMinterV0.Claim) _impactCerts\n")),(0,l.kt)("h3",{id:"claim-3"},"Claim"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"struct Claim {\n  bytes32 claimHash;\n  uint64[2] workTimeframe;\n  uint64[2] impactTimeframe;\n  bytes32[] workScopes;\n  bytes32[] impactScopes;\n  bytes32[] rights;\n  address[] contributors;\n  uint16 version;\n  bool exists;\n}\n\n")),(0,l.kt)("h3",{id:"impactclaimed-3"},"ImpactClaimed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ImpactClaimed(uint256 id, address minter, bytes32 claimHash, address[] contributors, uint64[2] workTimeframe, uint64[2] impactTimeframe, bytes32[] workScopes, bytes32[] impactScopes, bytes32[] rights, uint64 version, string uri)\n")),(0,l.kt)("p",null,"Emitted when an impact is claimed."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the claimed impact.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"minter"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"Address of cert minter.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claimHash"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Hash value of the claim data.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"contributors"),(0,l.kt)("td",{parentName:"tr",align:null},"address[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Contributors to the claimed impact.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"workTimeframe"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64","[2]"),(0,l.kt)("td",{parentName:"tr",align:null},"To/from date of the work related to the claim.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"impactTimeframe"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64","[2]"),(0,l.kt)("td",{parentName:"tr",align:null},"To/from date of the claimed impact.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"workScopes"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Id's relating to the scope of the work.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"impactScopes"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Id's relating to the scope of the impact.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rights"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Id's relating to the rights applied to the hypercert.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"version"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64"),(0,l.kt)("td",{parentName:"tr",align:null},"Version of the hypercert.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uri"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the metadata of the hypercert.")))),(0,l.kt)("h3",{id:"impactscopeadded-3"},"ImpactScopeAdded"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ImpactScopeAdded(bytes32 id, string text)\n")),(0,l.kt)("p",null,"Emitted when a new impact scope is added."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the impact scope.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Short text code of the impact scope.")))),(0,l.kt)("h3",{id:"rightadded-3"},"RightAdded"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event RightAdded(bytes32 id, string text)\n")),(0,l.kt)("p",null,"Emitted when a new right is added."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the right.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Short text code of the right.")))),(0,l.kt)("h3",{id:"workscopeadded-3"},"WorkScopeAdded"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event WorkScopeAdded(bytes32 id, string text)\n")),(0,l.kt)("p",null,"Emitted when a new work scope is added."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the work scope.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Short text code of the work scope.")))),(0,l.kt)("h3",{id:"constructor-3"},"constructor"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"constructor() public\n")),(0,l.kt)("p",null,"Contract constructor logic"),(0,l.kt)("h3",{id:"initialize-6"},"initialize"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function initialize() public\n")),(0,l.kt)("p",null,"Contract initialization logic"),(0,l.kt)("h3",{id:"addimpactscope-3"},"addImpactScope"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function addImpactScope(string text) public returns (bytes32 id)\n")),(0,l.kt)("p",null,"Adds a new impact scope"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Text representing the impact scope")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the impact scope")))),(0,l.kt)("h3",{id:"addright-3"},"addRight"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function addRight(string text) public returns (bytes32 id)\n")),(0,l.kt)("p",null,"Adds a new right"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Text representing the right")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the right")))),(0,l.kt)("h3",{id:"addworkscope-3"},"addWorkScope"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function addWorkScope(string text) public returns (bytes32 id)\n")),(0,l.kt)("p",null,"Adds a new work scope"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Text representing the work scope")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the work scope")))),(0,l.kt)("h3",{id:"mint-3"},"mint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function mint(address account, bytes data) public virtual\n")),(0,l.kt)("p",null,"Issues a new hypercertificate"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"account"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"Account issuing the new hypercertificate")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"Data representing the parameters of the claim")))),(0,l.kt)("h3",{id:"getimpactcert-3"},"getImpactCert"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function getImpactCert(uint256 claimID) public view returns (struct HypercertMinterV0.Claim)\n")),(0,l.kt)("p",null,"Gets the impact claim with the specified id"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claimID"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the claim")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"struct HypercertMinterV0.Claim"),(0,l.kt)("td",{parentName:"tr",align:null},"The claim, if it doesn't exist with default values")))),(0,l.kt)("h3",{id:"tokenuri-4"},"tokenURI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function tokenURI(uint256 tokenId) public view returns (string)\n")),(0,l.kt)("p",null,"Auto-generated by ",(0,l.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/4.x/wizard"},"https://docs.openzeppelin.com/contracts/4.x/wizard")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Selects which base implementation to call")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the token")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the token")))),(0,l.kt)("h3",{id:"version-3"},"version"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function version() public view virtual returns (uint256)\n")),(0,l.kt)("p",null,"gets the current version of the contract"),(0,l.kt)("h3",{id:"updateversion-3"},"updateVersion"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function updateVersion() external\n")),(0,l.kt)("p",null,"Update the contract version number\nOnly allowed for member of UPGRADER_ROLE"),(0,l.kt)("h3",{id:"supportsinterface-6"},"supportsInterface"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function supportsInterface(bytes4 interfaceId) public view returns (bool)\n")),(0,l.kt)("p",null,"Returns a flag indicating if the contract supports the specified interface"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"interfaceId"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes4"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the interface")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"true, if the interface is supported")))),(0,l.kt)("h3",{id:"_authorizeupgrade-3"},"_","authorizeUpgrade"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _authorizeUpgrade(address) internal view\n")),(0,l.kt)("p",null,"upgrade authorization logic"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"adds onlyRole(UPGRADER_ROLE) requirement")),(0,l.kt)("h3",{id:"_authorizeadd-3"},"_","authorizeAdd"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _authorizeAdd(string text, mapping(bytes32 => string) map) internal view virtual returns (bytes32 id)\n")),(0,l.kt)("p",null,"Pre-add validation checks"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Text to be added")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"map"),(0,l.kt)("td",{parentName:"tr",align:null},"mapping(bytes32 ","=",">"," string)"),(0,l.kt)("td",{parentName:"tr",align:null},"Storage mapping that will be appended")))),(0,l.kt)("h3",{id:"_authorizemint-3"},"_","authorizeMint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _authorizeMint(address account, struct HypercertMinterV0.Claim claim) internal view virtual\n")),(0,l.kt)("p",null,"Pre-mint validation checks"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"account"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"Destination address for the mint")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claim"),(0,l.kt)("td",{parentName:"tr",align:null},"struct HypercertMinterV0.Claim"),(0,l.kt)("td",{parentName:"tr",align:null},"Impact claim data")))),(0,l.kt)("h3",{id:"_burn-4"},"_","burn"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _burn(uint256 tokenId) internal\n")),(0,l.kt)("h3",{id:"_parsedata-3"},"_","parseData"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _parseData(bytes data) internal pure virtual returns (struct HypercertMinterV0.Claim claim, string)\n")),(0,l.kt)("p",null,"Parse bytes to Claim and URI"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"This function is overridable in order to support future schema changes")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"Byte data representing the claim")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claim"),(0,l.kt)("td",{parentName:"tr",align:null},"struct HypercertMinterV0.Claim"),(0,l.kt)("td",{parentName:"tr",align:null},"The parsed Claim struct")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[1]"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Claim metadata URI")))),(0,l.kt)("h3",{id:"_storecontributorsclaims-3"},"_","storeContributorsClaims"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _storeContributorsClaims(bytes32 claimHash, address[] creators) internal\n")),(0,l.kt)("p",null,"Stores contributor claims in the ",(0,l.kt)("inlineCode",{parentName:"p"},"contributorImpacts")," mapping; guards against overlapping claims"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claimHash"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Claim data hash-code value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"creators"),(0,l.kt)("td",{parentName:"tr",align:null},"address[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Array of addresses for contributors")))),(0,l.kt)("h3",{id:"_hash-3"},"_","hash"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _hash(string value) internal pure returns (bytes32)\n")),(0,l.kt)("p",null,"Hash the specified string value"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"string to hash")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"a keccak256 hash-code")))),(0,l.kt)("h3",{id:"_haskey-3"},"_","hasKey"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _hasKey(mapping(bytes32 => string) map, bytes32 key) internal view returns (bool)\n")),(0,l.kt)("p",null,"Checks whether the supplied mapping contains the supplied key"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"map"),(0,l.kt)("td",{parentName:"tr",align:null},"mapping(bytes32 ","=",">"," string)"),(0,l.kt)("td",{parentName:"tr",align:null},"mapping to search")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"key"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"key to search")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"true, if the key exists in the mapping")))),(0,l.kt)("h2",{id:"hypercertminterv0-4"},"HypercertMinterV0"),(0,l.kt)("p",null,"Contains functions and events to initialize and issue a hypercertifcate"),(0,l.kt)("h3",{id:"name-4"},"NAME"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"string NAME\n")),(0,l.kt)("h3",{id:"upgrader_role-4"},"UPGRADER_ROLE"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes32 UPGRADER_ROLE\n")),(0,l.kt)("h3",{id:"_version-4"},"_","version"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"uint16 _version\n")),(0,l.kt)("h3",{id:"_counter-4"},"_","counter"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"uint256 _counter\n")),(0,l.kt)("h3",{id:"workscopes-4"},"workScopes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(bytes32 => string) workScopes\n")),(0,l.kt)("h3",{id:"impactscopes-4"},"impactScopes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(bytes32 => string) impactScopes\n")),(0,l.kt)("h3",{id:"rights-4"},"rights"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(bytes32 => string) rights\n")),(0,l.kt)("h3",{id:"_contributorimpacts-4"},"_","contributorImpacts"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(address => mapping(bytes32 => bool)) _contributorImpacts\n")),(0,l.kt)("h3",{id:"_impactcerts-4"},"_","impactCerts"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(uint256 => struct HypercertMinterV0.Claim) _impactCerts\n")),(0,l.kt)("h3",{id:"claim-4"},"Claim"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"struct Claim {\n  bytes32 claimHash;\n  uint64[2] workTimeframe;\n  uint64[2] impactTimeframe;\n  bytes32[] workScopes;\n  bytes32[] impactScopes;\n  bytes32[] rights;\n  address[] contributors;\n  uint16 version;\n  bytes data;\n  bool exists;\n}\n\n")),(0,l.kt)("h3",{id:"impactclaimed-4"},"ImpactClaimed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ImpactClaimed(uint256 id, address minter, bytes32 claimHash, address[] contributors, uint64[2] workTimeframe, uint64[2] impactTimeframe, bytes32[] workScopes, bytes32[] impactScopes, bytes32[] rights, uint64 version, string uri)\n")),(0,l.kt)("p",null,"Emitted when an impact is claimed."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the claimed impact.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"minter"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"Address of cert minter.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claimHash"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Hash value of the claim data.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"contributors"),(0,l.kt)("td",{parentName:"tr",align:null},"address[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Contributors to the claimed impact.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"workTimeframe"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64","[2]"),(0,l.kt)("td",{parentName:"tr",align:null},"To/from date of the work related to the claim.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"impactTimeframe"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64","[2]"),(0,l.kt)("td",{parentName:"tr",align:null},"To/from date of the claimed impact.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"workScopes"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Id's relating to the scope of the work.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"impactScopes"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Id's relating to the scope of the impact.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rights"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Id's relating to the rights applied to the hypercert.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"version"),(0,l.kt)("td",{parentName:"tr",align:null},"uint64"),(0,l.kt)("td",{parentName:"tr",align:null},"Version of the hypercert.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uri"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the metadata of the hypercert.")))),(0,l.kt)("h3",{id:"impactscopeadded-4"},"ImpactScopeAdded"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ImpactScopeAdded(bytes32 id, string text)\n")),(0,l.kt)("p",null,"Emitted when a new impact scope is added."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the impact scope.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Short text code of the impact scope.")))),(0,l.kt)("h3",{id:"rightadded-4"},"RightAdded"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event RightAdded(bytes32 id, string text)\n")),(0,l.kt)("p",null,"Emitted when a new right is added."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the right.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Short text code of the right.")))),(0,l.kt)("h3",{id:"workscopeadded-4"},"WorkScopeAdded"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event WorkScopeAdded(bytes32 id, string text)\n")),(0,l.kt)("p",null,"Emitted when a new work scope is added."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the work scope.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Short text code of the work scope.")))),(0,l.kt)("h3",{id:"constructor-4"},"constructor"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"constructor() public\n")),(0,l.kt)("p",null,"Contract constructor logic"),(0,l.kt)("h3",{id:"initialize-7"},"initialize"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function initialize() public\n")),(0,l.kt)("p",null,"Contract initialization logic"),(0,l.kt)("h3",{id:"addimpactscope-4"},"addImpactScope"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function addImpactScope(string text) public returns (bytes32 id)\n")),(0,l.kt)("p",null,"Adds a new impact scope"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Text representing the impact scope")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the impact scope")))),(0,l.kt)("h3",{id:"addright-4"},"addRight"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function addRight(string text) public returns (bytes32 id)\n")),(0,l.kt)("p",null,"Adds a new right"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Text representing the right")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the right")))),(0,l.kt)("h3",{id:"addworkscope-4"},"addWorkScope"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function addWorkScope(string text) public returns (bytes32 id)\n")),(0,l.kt)("p",null,"Adds a new work scope"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Text representing the work scope")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the work scope")))),(0,l.kt)("h3",{id:"mint-4"},"mint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function mint(address account, uint256 amount, bytes data) public virtual\n")),(0,l.kt)("p",null,"Issues a new hypercertificate"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"account"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"Account issuing the new hypercertificate")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"amount"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"Amount of the new hypercertificate to mint")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"Data representing the parameters of the claim")))),(0,l.kt)("h3",{id:"getimpactcert-4"},"getImpactCert"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function getImpactCert(uint256 claimID) public view returns (struct HypercertMinterV0.Claim)\n")),(0,l.kt)("p",null,"Gets the impact claim with the specified id"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claimID"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the claim")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"struct HypercertMinterV0.Claim"),(0,l.kt)("td",{parentName:"tr",align:null},"The claim, if it doesn't exist with default values")))),(0,l.kt)("h3",{id:"uri"},"uri"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function uri(uint256 tokenId) public view returns (string)\n")),(0,l.kt)("p",null,"Gets the URI of the token with the specified id"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tokenId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the token")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the specified token")))),(0,l.kt)("h3",{id:"version-4"},"version"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function version() public view virtual returns (uint256)\n")),(0,l.kt)("p",null,"gets the current version of the contract"),(0,l.kt)("h3",{id:"updateversion-4"},"updateVersion"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function updateVersion() external\n")),(0,l.kt)("p",null,"Update the contract version number\nOnly allowed for member of UPGRADER_ROLE"),(0,l.kt)("h3",{id:"supportsinterface-7"},"supportsInterface"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function supportsInterface(bytes4 interfaceId) public view returns (bool)\n")),(0,l.kt)("p",null,"Returns a flag indicating if the contract supports the specified interface"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"interfaceId"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes4"),(0,l.kt)("td",{parentName:"tr",align:null},"Id of the interface")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"true, if the interface is supported")))),(0,l.kt)("h3",{id:"_authorizeupgrade-4"},"_","authorizeUpgrade"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _authorizeUpgrade(address newImplementation) internal\n")),(0,l.kt)("p",null,"_","Function that should revert when ",(0,l.kt)("inlineCode",{parentName:"p"},"msg.sender")," is not authorized to upgrade the contract. Called by\n{upgradeTo} and {upgradeToAndCall}."),(0,l.kt)("p",null,"Normally, this function will use an xref:access.adoc","[access control]"," modifier such as {Ownable-onlyOwner}."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _authorizeUpgrade(address) internal override onlyOwner {}\n```_\n\n### _beforeTokenTransfer\n\n```solidity\nfunction _beforeTokenTransfer(address operator, address from, address to, uint256[] ids, uint256[] amounts, bytes data) internal\n")),(0,l.kt)("h3",{id:"_authorizeadd-4"},"_","authorizeAdd"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _authorizeAdd(string text, mapping(bytes32 => string) map) internal view virtual returns (bytes32 id)\n")),(0,l.kt)("p",null,"Pre-add validation checks"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Text to be added")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"map"),(0,l.kt)("td",{parentName:"tr",align:null},"mapping(bytes32 ","=",">"," string)"),(0,l.kt)("td",{parentName:"tr",align:null},"Storage mapping that will be appended")))),(0,l.kt)("h3",{id:"_authorizemint-4"},"_","authorizeMint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _authorizeMint(address account, struct HypercertMinterV0.Claim claim) internal view virtual\n")),(0,l.kt)("p",null,"Pre-mint validation checks"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"account"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"Destination address for the mint")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claim"),(0,l.kt)("td",{parentName:"tr",align:null},"struct HypercertMinterV0.Claim"),(0,l.kt)("td",{parentName:"tr",align:null},"Impact claim data")))),(0,l.kt)("h3",{id:"_parsedata-4"},"_","parseData"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _parseData(bytes data) internal pure virtual returns (struct HypercertMinterV0.Claim claim, string)\n")),(0,l.kt)("p",null,"Parse bytes to Claim and URI"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"This function is overridable in order to support future schema changes")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"Byte data representing the claim")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"claim"),(0,l.kt)("td",{parentName:"tr",align:null},"struct HypercertMinterV0.Claim"),(0,l.kt)("td",{parentName:"tr",align:null},"The parsed Claim struct")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[1]"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Claim metadata URI")))),(0,l.kt)("h3",{id:"_storecontributorsclaims-4"},"_","storeContributorsClaims"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _storeContributorsClaims(bytes32 claimHash, address[] creators) internal virtual\n")),(0,l.kt)("h3",{id:"_haskey-4"},"_","hasKey"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _hasKey(mapping(bytes32 => string) map, bytes32 key) internal view returns (bool)\n")))}m.isMDXComponent=!0}}]);